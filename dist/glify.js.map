{"version":3,"sources":["map-matrix.ts","leaflet-bindings.js","canvas-overlay.ts","base.ts","color.ts","line-feature-vertices.ts","utils.ts","lines.ts","points.ts","shapes.ts","index.ts"],"names":["exports","L","window","module"],"mappings":"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","file":"glify.js","sourceRoot":"..\\src","sourcesContent":["export class MapMatrix {\r\n  array: Float32Array;\r\n  constructor() {\r\n    this.array = new Float32Array(16);\r\n  }\r\n  set(array: ArrayLike<number>, offset?: number): this {\r\n    this.array.set(array, offset);\r\n    return this;\r\n  }\r\n  translateMatrix(tx: number, ty: number) {\r\n    const { array } = this;\r\n    // translation is in last column of matrix\r\n    array[12] += array[0] * tx + array[4] * ty;\r\n    array[13] += array[1] * tx + array[5] * ty;\r\n    array[14] += array[2] * tx + array[6] * ty;\r\n    array[15] += array[3] * tx + array[7] * ty;\r\n\r\n    return this;\r\n  }\r\n  scaleMatrix(scale: number) {\r\n    const { array } = this;\r\n    // scaling x and y, which is just scaling first two columns of matrix\r\n    array[0] *= scale;\r\n    array[1] *= scale;\r\n    array[2] *= scale;\r\n    array[3] *= scale;\r\n\r\n    array[4] *= scale;\r\n    array[5] *= scale;\r\n    array[6] *= scale;\r\n    array[7] *= scale;\r\n\r\n    return this;\r\n  }\r\n}\r\n","/* It was tried to allow for better tree shaking to import leaflet's src files one by one,\r\n * but this caused node not to work, because leaflet uses import/export.  So it was easier to\r\n * simply import it directly.  It causes a 70kb growth in the bundle, but the current time to\r\n * manage vs size ratio didn't justify continuing.\r\n */\r\nimport * as L from 'leaflet';\r\n\r\nlet exports = L;\r\n\r\nif (window && window.L) {\r\n  exports = window.L;\r\n}\r\n\r\nmodule.exports = exports;","/*\r\noriginally taken from: http://www.sumbera.com/gist/js/leaflet/canvas/L.CanvasOverlay.js, added and customized as part of this lib because of need from library\r\n Generic  Canvas Overlay for leaflet,\r\n Stanislav Sumbera, April , 2014\r\n\r\n - added userDrawFunc that is called when Canvas need to be redrawn\r\n - added few useful params fro userDrawFunc callback\r\n - fixed resize map bug\r\n inspired & portions taken from  :   https://github.com/Leaflet/Leaflet.heat\r\n */\r\n\r\nimport {\r\n  LatLngBounds,\r\n  Map,\r\n  Point,\r\n  Layer,\r\n  Util,\r\n  Browser,\r\n  Bounds,\r\n  DomUtil,\r\n  LatLng,\r\n  ZoomAnimEvent,\r\n} from './leaflet-bindings';\r\n\r\nexport interface ICanvasOverlayDrawEvent {\r\n  canvas: HTMLCanvasElement;\r\n  bounds: LatLngBounds;\r\n  offset: Point;\r\n  scale: number;\r\n  size: Point;\r\n  zoomScale: number;\r\n  zoom: number;\r\n}\r\n\r\nexport interface IUserDrawFunc {\r\n  (event: ICanvasOverlayDrawEvent): void\r\n}\r\n\r\nexport class CanvasOverlay extends Layer {\r\n  _userDrawFunc: IUserDrawFunc;\r\n  _map: Map;\r\n  _redrawCallbacks: Function[];\r\n  canvas: HTMLCanvasElement;\r\n\r\n  _frame?: number;\r\n\r\n  constructor(\r\n    userDrawFunc: IUserDrawFunc\r\n  ) {\r\n    super();\r\n    this._userDrawFunc = userDrawFunc;\r\n    this._frame = null;\r\n    this._redrawCallbacks = [];\r\n  }\r\n\r\n  drawing(userDrawFunc): this {\r\n    this._userDrawFunc = userDrawFunc;\r\n    return this;\r\n  }\r\n\r\n  params(options): this {\r\n    Util.setOptions(this, options);\r\n    return this;\r\n  }\r\n\r\n  redraw(callback?) {\r\n    if (typeof callback === 'function') {\r\n      this._redrawCallbacks.push(callback);\r\n    }\r\n    if (this._frame === null) {\r\n      this._frame = Util.requestAnimFrame(this._redraw, this);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  onAdd(map): this {\r\n    this._map = map;\r\n    this.canvas = this.canvas || document.createElement('canvas');\r\n\r\n    const size = map.getSize()\r\n      , animated = map.options.zoomAnimation && Browser.any3d\r\n      ;\r\n\r\n    this.canvas.width = size.x;\r\n    this.canvas.height = size.y;\r\n\r\n    this.canvas.className = 'leaflet-zoom-' + (animated ? 'animated' : 'hide');\r\n\r\n    map._panes.overlayPane.appendChild(this.canvas);\r\n\r\n    map.on('moveend', this._reset, this);\r\n    map.on('resize',  this._resize, this);\r\n\r\n    if (animated) {\r\n      map.on('zoomanim', Layer ? this._animateZoom : this._animateZoomNoLayer, this);\r\n    }\r\n\r\n    this._reset();\r\n    return this;\r\n  }\r\n\r\n  onRemove(map): this {\r\n    map.getPanes().overlayPane.removeChild(this.canvas);\r\n\r\n    map.off('moveend', this._reset, this);\r\n    map.off('resize', this._resize, this);\r\n\r\n    if (map.options.zoomAnimation && Browser.any3d) {\r\n      map.off('zoomanim', Layer ? this._animateZoom : this._animateZoomNoLayer, this);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  addTo(map): this {\r\n    map.addLayer(this);\r\n    return this;\r\n  }\r\n\r\n  _resize(resizeEvent): void {\r\n    this.canvas.width  = resizeEvent.newSize.x;\r\n    this.canvas.height = resizeEvent.newSize.y;\r\n  }\r\n\r\n  _reset(): void {\r\n    const topLeft = this._map.containerPointToLayerPoint([0, 0]);\r\n    DomUtil.setPosition(this.canvas, topLeft);\r\n    this._redraw();\r\n  }\r\n\r\n  _redraw(): void {\r\n    const { _map, canvas } = this\r\n      , size = _map.getSize()\r\n      , bounds = _map.getBounds()\r\n      , zoomScale = (size.x * 180) / (20037508.34  * (bounds.getEast() - bounds.getWest())) // resolution = 1/zoomScale\r\n      , zoom = _map.getZoom()\r\n      , topLeft = new LatLng(bounds.getNorth(), bounds.getWest())\r\n      , offset = this._unclampedProject(topLeft, 0)\r\n      ;\r\n\r\n    if (this._userDrawFunc) {\r\n      this._userDrawFunc({\r\n        bounds,\r\n        canvas,\r\n        offset,\r\n        scale: Math.pow(2, zoom),\r\n        size,\r\n        zoomScale,\r\n        zoom,\r\n      });\r\n    }\r\n\r\n    while (this._redrawCallbacks.length > 0) {\r\n      this._redrawCallbacks.shift()(this);\r\n    }\r\n\r\n    this._frame = null;\r\n  }\r\n\r\n  _animateZoom(e: ZoomAnimEvent): void {\r\n    const { _map } = this\r\n      , scale = _map.getZoomScale(e.zoom, _map.getZoom())\r\n      // @ts-ignore\r\n      , offset = this._unclampedLatLngBoundsToNewLayerBounds(_map.getBounds(), e.zoom, e.center).min\r\n      ;\r\n    DomUtil.setTransform(this.canvas, offset, scale);\r\n  }\r\n\r\n  _animateZoomNoLayer(e: ZoomAnimEvent): void {\r\n    const { _map } = this\r\n      , scale = _map.getZoomScale(e.zoom, _map.getZoom())\r\n      // @ts-ignore\r\n      , offset = _map._getCenterOffset(e.center)\r\n        ._multiplyBy(-scale)\r\n        // @ts-ignore\r\n        .subtract(_map._getMapPanePos())\r\n      ;\r\n    DomUtil.setTransform(this.canvas, offset, scale);\r\n  }\r\n\r\n  _unclampedProject(latlng: LatLng, zoom: number): Point {\r\n    // imported partly from https://github.com/Leaflet/Leaflet/blob/1ae785b73092fdb4b97e30f8789345e9f7c7c912/src/geo/projection/Projection.SphericalMercator.js#L21\r\n    // used because they clamp the latitude\r\n    const { crs } = this._map.options\r\n      // @ts-ignore\r\n      , { R } = crs.projection\r\n      , d = Math.PI / 180\r\n      , lat = latlng.lat\r\n      , sin = Math.sin(lat * d)\r\n      , projectedPoint = new Point(\r\n          // @ts-ignore\r\n          R * latlng.lng * d,\r\n          // @ts-ignore\r\n          R * Math.log((1 + sin) / (1 - sin)) / 2\r\n        )\r\n      , scale = crs.scale(zoom)\r\n      ;\r\n    // @ts-ignore\r\n    return crs.transformation._transform(projectedPoint, scale);\r\n  }\r\n\r\n  _unclampedLatLngBoundsToNewLayerBounds(latLngBounds: LatLngBounds, zoom: number, center: LatLng): Bounds {\r\n    // imported party from https://github.com/Leaflet/Leaflet/blob/84bc05bbb6e4acc41e6f89ff7421dd7c6520d256/src/map/Map.js#L1500\r\n    // used because it uses crs.projection.project, which clamp the latitude\r\n    // @ts-ignore\r\n    const topLeft = this._map._getNewPixelOrigin(center, zoom);\r\n    return new Bounds([\r\n      this._unclampedProject(latLngBounds.getSouthWest(), zoom).subtract(topLeft),\r\n      this._unclampedProject(latLngBounds.getNorthWest(), zoom).subtract(topLeft),\r\n      this._unclampedProject(latLngBounds.getSouthEast(), zoom).subtract(topLeft),\r\n      this._unclampedProject(latLngBounds.getNorthEast(), zoom).subtract(topLeft)\r\n    ]);\r\n  }\r\n}\r\n","import { IColor } from './color';\r\nimport { Map, Point } from './leaflet-bindings';\r\nimport { MapMatrix } from './map-matrix';\r\nimport { CanvasOverlay, ICanvasOverlayDrawEvent } from './canvas-overlay';\r\n\r\nexport interface IShaderVariable {\r\n  type: 'FLOAT';\r\n  start: number;\r\n  size: number;\r\n  bytes?: number;\r\n  normalize?: boolean;\r\n}\r\n\r\nexport interface IBaseSettings {\r\n  map: Map;\r\n  data: any;\r\n  shaderVariables?: {\r\n    [name: string]: IShaderVariable\r\n  }\r\n  longitudeKey?: number;\r\n  latitudeKey?: number;\r\n  setupClick?: (map: Map) => void;\r\n  vertexShaderSource?: (() => string) | string;\r\n  fragmentShaderSource?: (() => string) | string;\r\n  canvas?: HTMLCanvasElement;\r\n  click?: (e, feature, xy: Point) => boolean | void;\r\n  color?: ((featureIndex: number, feature: any) => IColor) | IColor;\r\n  className?: string;\r\n  opacity?: number;\r\n  preserveDrawingBuffer?: boolean;\r\n}\r\n\r\nexport abstract class Base<T extends IBaseSettings = IBaseSettings> {\r\n  active: boolean;\r\n  fragmentShader: any;\r\n  canvas: HTMLCanvasElement;\r\n  gl: WebGLRenderingContext;\r\n  layer: CanvasOverlay;\r\n  mapMatrix: MapMatrix;\r\n  matrix: WebGLUniformLocation;\r\n  pixelsToWebGLMatrix: Float32Array;\r\n  program: WebGLProgram;\r\n  settings: T;\r\n  vertexShader: any;\r\n  vertices: any;\r\n  vertsLines: any;\r\n\r\n  abstract render();\r\n\r\n  constructor(settings: T) {\r\n    this.pixelsToWebGLMatrix = new Float32Array(16);\r\n    this.mapMatrix = new MapMatrix();\r\n    this.active = true;\r\n    this.vertexShader = null;\r\n    this.fragmentShader = null;\r\n    this.program = null;\r\n    this.matrix = null;\r\n    this.vertices = null;\r\n    this.vertsLines = null;\r\n    const preserveDrawingBuffer = Boolean(settings.preserveDrawingBuffer);\r\n    const layer = this.layer = new CanvasOverlay((context) => this.drawOnCanvas(context))\r\n      .addTo(settings.map);\r\n    const canvas = this.canvas = layer.canvas;\r\n    canvas.width = canvas.clientWidth;\r\n    canvas.height = canvas.clientHeight;\r\n    canvas.style.position = 'absolute';\r\n    if (settings.className) {\r\n      canvas.className += ' ' + settings.className;\r\n    }\r\n    this.gl = (\r\n      canvas.getContext('webgl2', { preserveDrawingBuffer })\r\n      || canvas.getContext('webgl', { preserveDrawingBuffer })\r\n      || canvas.getContext('experimental-webgl', { preserveDrawingBuffer })) as WebGLRenderingContext;\r\n  }\r\n\r\n  abstract drawOnCanvas(context: ICanvasOverlayDrawEvent): this;\r\n\r\n  attachShaderVariables(byteCount: number): this {\r\n    if (!this.settings.shaderVariables) {\r\n      return this;\r\n    }\r\n    const bytes = 5;\r\n\r\n    const { gl, program } = this;\r\n    const { shaderVariables } = this.settings;\r\n    for (const name in shaderVariables) {\r\n      if (!shaderVariables.hasOwnProperty(name)) continue;\r\n      const shaderVariable = shaderVariables[name];\r\n      const loc = gl.getAttribLocation(program, name);\r\n      if (loc < 0) {\r\n        throw new Error('shader variable ' + name + ' not found');\r\n      }\r\n      gl.vertexAttribPointer(\r\n        loc,\r\n        shaderVariable.size,\r\n        gl[shaderVariable.type],\r\n        !!shaderVariable.normalize,\r\n        byteCount * (shaderVariable.bytes || bytes),\r\n        byteCount * shaderVariable.start);\r\n      gl.enableVertexAttribArray(loc);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  setData(data): this {\r\n    this.settings.data = data;\r\n    return this;\r\n  }\r\n\r\n  setup() {\r\n    const settings = this.settings;\r\n    if (settings.click) {\r\n      settings.setupClick(settings.map);\r\n    }\r\n\r\n    return this\r\n      .setupVertexShader()\r\n      .setupFragmentShader()\r\n      .setupProgram();\r\n  }\r\n\r\n  setupVertexShader() {\r\n    const gl = this.gl\r\n      , settings = this.settings\r\n      , vertexShaderSource = typeof settings.vertexShaderSource === 'function'\r\n          ? settings.vertexShaderSource()\r\n          : settings.vertexShaderSource\r\n      , vertexShader = gl.createShader(gl.VERTEX_SHADER)\r\n      ;\r\n\r\n    gl.shaderSource(vertexShader, vertexShaderSource);\r\n    gl.compileShader(vertexShader);\r\n\r\n    this.vertexShader = vertexShader;\r\n\r\n    return this;\r\n  }\r\n\r\n  setupFragmentShader() {\r\n    const gl = this.gl\r\n      , settings = this.settings\r\n      , fragmentShaderSource = typeof settings.fragmentShaderSource === 'function'\r\n          ? settings.fragmentShaderSource()\r\n          : settings.fragmentShaderSource\r\n      , fragmentShader = gl.createShader(gl.FRAGMENT_SHADER)\r\n      ;\r\n\r\n    gl.shaderSource(fragmentShader, fragmentShaderSource);\r\n    gl.compileShader(fragmentShader);\r\n\r\n    this.fragmentShader = fragmentShader;\r\n\r\n    return this;\r\n  }\r\n\r\n  setupProgram(): this {\r\n    // link shaders to create our program\r\n    const gl = this.gl\r\n      , program = gl.createProgram()\r\n      ;\r\n\r\n    gl.attachShader(program, this.vertexShader);\r\n    gl.attachShader(program, this.fragmentShader);\r\n    gl.linkProgram(program);\r\n    gl.useProgram(program);\r\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n    gl.enable(gl.BLEND);\r\n\r\n    this.program = program;\r\n\r\n    return this;\r\n  }\r\n\r\n  addTo(map) {\r\n    this.layer.addTo(map || this.settings.map);\r\n    this.active = true;\r\n    return this.render();\r\n  }\r\n\r\n  remove() {\r\n    this.settings.map.removeLayer(this.layer as any);\r\n    this.active = false;\r\n    return this;\r\n  }\r\n}","export interface IColor {\r\n  r: number;\r\n  g: number;\r\n  b: number;\r\n}\r\n\r\nconst green: IColor = {r: 0, g: 1, b: 0};\r\nconst red: IColor = {r: 1, g: 0, b: 0};\r\nconst blue: IColor = {r: 0, g: 0, b: 1};\r\nconst teal: IColor = {r: 0, g: 1, b: 1};\r\nconst yellow: IColor = {r: 1, g: 1, b: 0};\r\n\r\nconst white: IColor = {r: 1, g: 1, b: 1};\r\nconst black: IColor = {r: 0, g: 0, b: 0};\r\n\r\nconst gray: IColor = {r: 0.5, g: 0.5, b: 0.5};\r\n\r\nexport class Color {\r\n  static green;\r\n  static red;\r\n  static blue;\r\n  static teal;\r\n  static yellow;\r\n  static white;\r\n  static black;\r\n  static gray;\r\n  static get grey() {\r\n    return gray;\r\n  }\r\n\r\n  static fromHex(hex): IColor | null {\r\n    if (hex.length < 6) return null;\r\n    hex = hex.toLowerCase();\r\n\r\n    if (hex[0] === '#') {\r\n      hex = hex.substring(1, hex.length);\r\n    }\r\n\r\n    const r = parseInt(hex[0] + hex[1], 16)\r\n      , g = parseInt(hex[2] + hex[3], 16)\r\n      , b = parseInt(hex[4] + hex[5], 16)\r\n      ;\r\n    return { r: r / 255, g: g / 255, b: b / 255 };\r\n  }\r\n\r\n  static random(): IColor {\r\n    return {\r\n      r: Math.random(),\r\n      g: Math.random(),\r\n      b: Math.random()\r\n    };\r\n  }\r\n\r\n  static pallet(): IColor {\r\n    switch (Math.round(Math.random() * 4)) {\r\n      case 0:\r\n        return green;\r\n      case 1:\r\n        return red;\r\n      case 2:\r\n        return blue;\r\n      case 3:\r\n        return teal;\r\n      case 4:\r\n        return yellow;\r\n    }\r\n  }\r\n}","import { LatLng } from './leaflet-bindings';\r\nimport { IColor } from './color';\r\nimport { IPixel } from './pixel';\r\n\r\ninterface ILineFeatureVerticesSettings {\r\n  project: (coordinates: LatLng, distance: number) => IPixel;\r\n  color: IColor;\r\n  latitudeKey?: number;\r\n  longitudeKey?: number;\r\n}\r\n\r\nexport class LineFeatureVertices {\r\n  project: (coordinates: LatLng, distance: number) => IPixel;\r\n  latitudeKey?: number;\r\n  longitudeKey?: number;\r\n  color: IColor;\r\n  vertexCount: number;\r\n  array: number[];\r\n  length: number;\r\n\r\n  constructor(settings: ILineFeatureVerticesSettings) {\r\n    Object.assign(this, settings);\r\n    this.vertexCount = 0;\r\n    this.array = [];\r\n    this.length = 0;\r\n  }\r\n\r\n  fillFromCoordinates(coordinates) {\r\n    const { color } = this;\r\n    for (let i = 0; i < coordinates.length; i++) {\r\n      if (Array.isArray(coordinates[i][0])) {\r\n        this.fillFromCoordinates(coordinates[i]);\r\n        continue;\r\n      }\r\n      const pixel = this.project(\r\n        new LatLng(\r\n          coordinates[i][this.latitudeKey],\r\n          coordinates[i][this.longitudeKey]\r\n        ), 0);\r\n      this.push(pixel.x, pixel.y, color.r, color.g, color.b);\r\n      if (i !== 0 && i !== coordinates.length - 1) {\r\n        this.vertexCount += 1;\r\n      }\r\n      this.vertexCount += 1;\r\n    }\r\n  }\r\n\r\n  push(...args) {\r\n    this.array.push(...args);\r\n    this.length = this.array.length;\r\n  }\r\n}","import { LatLng, Map } from './leaflet-bindings';\r\n\r\nexport function defaults(userSettings, defaults) {\r\n  const settings = {};\r\n\r\n  for (const i in defaults) {\r\n    if (!defaults.hasOwnProperty(i)) continue;\r\n    settings[i] = (userSettings.hasOwnProperty(i) ? userSettings[i] : defaults[i]);\r\n  }\r\n\r\n  return settings;\r\n}\r\n\r\n// -- converts latlon to pixels at zoom level 0 (for 256x256 tile size) , inverts y coord )\r\n// -- source : http://build-failed.blogspot.cz/2013/02/displaying-webgl-data-on-google-maps.html\r\nexport function latLonToPixel(latitude, longitude) {\r\n  const pi180 = Math.PI / 180.0,\r\n    pi4 = Math.PI * 4,\r\n    sinLatitude = Math.sin(latitude * pi180),\r\n    pixelY = (0.5 - Math.log((1 + sinLatitude) / (1 - sinLatitude)) / (pi4)) * 256,\r\n    pixelX = ((longitude + 180) / 360) * 256;\r\n\r\n  return {x: pixelX, y: pixelY};\r\n}\r\n\r\nexport function pointInCircle(centerPoint, checkPoint, radius) {\r\n  const distanceSquared = (centerPoint.x - checkPoint.x) * (centerPoint.x - checkPoint.x) + (centerPoint.y - checkPoint.y) * (centerPoint.y - checkPoint.y);\r\n  return distanceSquared <= radius * radius;\r\n}\r\n\r\nexport function pDistance(x, y, x1, y1, x2, y2): number {\r\n  const A = x - x1;\r\n  const B = y - y1;\r\n  const C = x2 - x1;\r\n  const D = y2 - y1;\r\n\r\n  const dot = A * C + B * D;\r\n  const len_sq = C * C + D * D;\r\n  let param = -1;\r\n  if (len_sq !== 0) //in case of 0 length line\r\n    param = dot / len_sq;\r\n\r\n  let xx, yy;\r\n\r\n  if (param < 0) {\r\n    xx = x1;\r\n    yy = y1;\r\n  } else if (param > 1) {\r\n    xx = x2;\r\n    yy = y2;\r\n  } else {\r\n    xx = x1 + param * C;\r\n    yy = y1 + param * D;\r\n  }\r\n\r\n  let dx = x - xx;\r\n  let dy = y - yy;\r\n  return Math.sqrt(dx * dx + dy * dy);\r\n}\r\n\r\nexport function vectorDistance(dx: number, dy: number): number {\r\n  return Math.sqrt(dx * dx + dy * dy);\r\n}\r\n\r\nexport function locationDistance(location1: LatLng, location2: LatLng, map: Map): number {\r\n  const point1 = map.latLngToLayerPoint(location1)\r\n    , point2 = map.latLngToLayerPoint(location2)\r\n    , dx = point1.x - point2.x\r\n    , dy = point1.y - point2.y\r\n  ;\r\n  return vectorDistance(dx, dy);\r\n}\r\n\r\nexport function debugPoint(containerPoint) {\r\n  const el = document.createElement('div')\r\n    , s = el.style\r\n    , x = containerPoint.x\r\n    , y = containerPoint.y\r\n  ;\r\n\r\n  s.left = x + 'px';\r\n  s.top = y + 'px';\r\n  s.width = '10px';\r\n  s.height = '10px';\r\n  s.position = 'absolute';\r\n  s.backgroundColor = '#' + (Math.random() * 0xFFFFFF << 0).toString(16);\r\n\r\n  document.body.appendChild(el);\r\n}","import { Base, IBaseSettings } from './base';\r\nimport { ICanvasOverlayDrawEvent } from './canvas-overlay';\r\nimport { Color, IColor } from './color';\r\nimport { Map, LeafletMouseEvent, LatLng } from './leaflet-bindings';\r\nimport { LineFeatureVertices } from './line-feature-vertices';\r\nimport { pDistance } from './utils';\r\n\r\nexport interface ILinesSettings extends IBaseSettings {\r\n  weight: ((i: number, feature: any) => number) | number;\r\n}\r\n\r\nconst defaults: ILinesSettings = {\r\n  map: null,\r\n  data: [],\r\n  longitudeKey: null,\r\n  latitudeKey: null,\r\n  setupClick: null,\r\n  vertexShaderSource: null,\r\n  fragmentShaderSource: null,\r\n  click: null,\r\n  color: Color.random,\r\n  className: '',\r\n  opacity: 0.5,\r\n  weight: 2,\r\n  shaderVariables: {\r\n    color: {\r\n      type: 'FLOAT',\r\n      start: 2,\r\n      size: 3\r\n    }\r\n  }\r\n};\r\n\r\nexport class Lines extends Base<ILinesSettings> {\r\n  static defaults = defaults;\r\n  static instances: Lines[] = [];\r\n\r\n  allVertices: number[];\r\n  vertices: LineFeatureVertices[];\r\n  aPointSize: number;\r\n\r\n  constructor(settings: ILinesSettings) {\r\n    super(settings);\r\n    Lines.instances.push(this);\r\n    this.settings = { ...Lines.defaults, ...settings };\r\n\r\n    if (!settings.data) throw new Error('no \"data\" array setting defined');\r\n    if (!settings.map) throw new Error('no leaflet \"map\" object setting defined');\r\n\r\n    this.active = true;\r\n    this.allVertices = [];\r\n\r\n    this\r\n      .setup()\r\n      .render();\r\n  }\r\n\r\n  render(): this {\r\n    this.resetVertices();\r\n\r\n    const pixelsToWebGLMatrix = this.pixelsToWebGLMatrix\r\n      , settings = this.settings\r\n      , { canvas, gl, layer, vertices, program } = this\r\n      , vertexBuffer = gl.createBuffer()\r\n      , vertex = gl.getAttribLocation(program, 'vertex')\r\n      , opacity = gl.getUniformLocation(program, 'opacity')\r\n      ;\r\n\r\n    gl.uniform1f(opacity, settings.opacity);\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\r\n\r\n    /*\r\n    Transforming lines according to the rule:\r\n    1. Take one line (single feature)\r\n    [[0,0],[1,1],[2,2]]\r\n    2. Split the line in segments, duplicating all coordinates except first and last one\r\n    [[0,0],[1,1],[2,2]] => [[0,0],[1,1],[1,1],[2,2]]\r\n    3. Do this for all lines and put all coordinates in array\r\n    */\r\n    let size = vertices.length;\r\n    const allVertices = [];\r\n    for (let i = 0; i < size; i++) {\r\n      const vertexArray = vertices[i].array;\r\n      const length = vertexArray.length / 5;\r\n      for (let j = 0; j < length; j++) {\r\n        const vertexIndex = j * 5;\r\n        if (j !== 0 && j !== (length - 1)) {\r\n          allVertices.push(\r\n            vertexArray[vertexIndex],\r\n            vertexArray[vertexIndex + 1],\r\n            vertexArray[vertexIndex + 2],\r\n            vertexArray[vertexIndex + 3],\r\n            vertexArray[vertexIndex + 4]\r\n          );\r\n        }\r\n        allVertices.push(\r\n          vertexArray[vertexIndex],\r\n          vertexArray[vertexIndex + 1],\r\n          vertexArray[vertexIndex + 2],\r\n          vertexArray[vertexIndex + 3],\r\n          vertexArray[vertexIndex + 4]\r\n        );\r\n      }\r\n    }\r\n\r\n    this.allVertices = allVertices;\r\n\r\n    const vertArray = new Float32Array(allVertices);\r\n    size = vertArray.BYTES_PER_ELEMENT;\r\n    gl.bufferData(gl.ARRAY_BUFFER, vertArray, gl.STATIC_DRAW);\r\n    gl.vertexAttribPointer(vertex, 2, gl.FLOAT, false, size * 5, 0);\r\n    gl.enableVertexAttribArray(vertex);\r\n\r\n    //  gl.disable(gl.DEPTH_TEST);\r\n    // ----------------------------\r\n    // look up the locations for the inputs to our shaders.\r\n    this.matrix = gl.getUniformLocation(program, 'matrix');\r\n    this.aPointSize = gl.getAttribLocation(program, 'pointSize');\r\n\r\n    // Set the matrix to some that makes 1 unit 1 pixel.\r\n    pixelsToWebGLMatrix.set([2 / canvas.width, 0, 0, 0, 0, -2 / canvas.height, 0, 0, 0, 0, 0, 0, -1, 1, 0, 1]);\r\n    gl.viewport(0, 0, canvas.width, canvas.height);\r\n\r\n    gl.uniformMatrix4fv(this.matrix, false, pixelsToWebGLMatrix);\r\n\r\n    this.attachShaderVariables(size);\r\n\r\n    layer.redraw();\r\n\r\n    return this;\r\n  }\r\n\r\n  resetVertices(): this {\r\n    this.allVertices = [];\r\n    this.vertices = [];\r\n\r\n    const vertices = this.vertices\r\n      , settings = this.settings\r\n      , data = settings.data\r\n      , features = data.features\r\n      , map = settings.map\r\n      , latitudeKey = settings.latitudeKey\r\n      , longitudeKey = settings.longitudeKey\r\n      , featureMax = features.length\r\n      ;\r\n\r\n    let feature\r\n      , { color } = settings\r\n      , colorFn: (i: number, feature: any) => IColor\r\n      , chosenColor\r\n      , featureIndex = 0\r\n      ;\r\n\r\n    if (!color) {\r\n      throw new Error('color is not properly defined');\r\n    } else if (typeof color === 'function') {\r\n      colorFn = color;\r\n    }\r\n\r\n    // -- data\r\n    for (; featureIndex < featureMax; featureIndex++) {\r\n      feature = features[featureIndex];\r\n      //use colorFn function here if it exists\r\n      if (colorFn) {\r\n        chosenColor = colorFn(featureIndex, feature);\r\n      } else {\r\n        chosenColor = color as IColor;\r\n      }\r\n\r\n      const featureVertices = new LineFeatureVertices({\r\n        project: map.project.bind(map),\r\n        latitudeKey,\r\n        longitudeKey,\r\n        color: chosenColor,\r\n      });\r\n      featureVertices.fillFromCoordinates(feature.geometry.coordinates);\r\n      vertices.push(featureVertices);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  drawOnCanvas(e: ICanvasOverlayDrawEvent): this {\r\n    if (!this.gl) return this;\r\n\r\n    const { gl, settings, canvas, mapMatrix, matrix, pixelsToWebGLMatrix, allVertices, vertices } = this\r\n      , weight = settings.weight\r\n      , { scale, offset, zoom } = e\r\n      , pointSize = Math.max(zoom - 4.0, 4.0)\r\n      ;\r\n\r\n    gl.clear(gl.COLOR_BUFFER_BIT);\r\n    gl.viewport(0, 0, canvas.width, canvas.height);\r\n    pixelsToWebGLMatrix.set([2 / canvas.width, 0, 0, 0, 0, -2 / canvas.height, 0, 0, 0, 0, 0, 0, -1, 1, 0, 1]);\r\n    gl.viewport(0, 0, canvas.width, canvas.height);\r\n    gl.vertexAttrib1f(this.aPointSize, pointSize);\r\n    if (zoom > 18) {\r\n      mapMatrix\r\n        .set(pixelsToWebGLMatrix)\r\n        .scaleMatrix(scale)\r\n        .translateMatrix(-offset.x, -offset.y);\r\n      // -- attach matrix value to 'mapMatrix' uniform in shader\r\n      gl.uniformMatrix4fv(matrix, false, mapMatrix.array);\r\n\r\n      gl.drawArrays(gl.LINES, 0, allVertices.length / 5);\r\n    } else if (typeof weight === 'number') {\r\n      // Now draw the lines several times, but like a brush, taking advantage of the half pixel line generally used by cards\r\n      for (let yOffset = -weight; yOffset < weight; yOffset += 0.5) {\r\n        for (let xOffset = -weight; xOffset < weight; xOffset += 0.5) {\r\n          // -- set base matrix to translate canvas pixel coordinates -> webgl coordinates\r\n          mapMatrix\r\n            .set(pixelsToWebGLMatrix)\r\n            .scaleMatrix(scale)\r\n            .translateMatrix(-offset.x + (xOffset / scale), -offset.y + (yOffset / scale));\r\n          // -- attach matrix value to 'mapMatrix' uniform in shader\r\n          gl.uniformMatrix4fv(matrix, false, mapMatrix.array);\r\n\r\n          gl.drawArrays(gl.LINES, 0, allVertices.length / 5);\r\n        }\r\n      }\r\n    } else if (typeof weight === 'function') {\r\n      let allVertexCount = 0;\r\n      const features = settings.data.features;\r\n      for (let i = 0; i < vertices.length; i++) {\r\n        const featureVertices = vertices[i];\r\n        const vertexCount = featureVertices.vertexCount;\r\n        const weightValue = weight(i, features[i]);\r\n        // Now draw the lines several times, but like a brush, taking advantage of the half pixel line generally used by cards\r\n        for (let yOffset = -weightValue; yOffset < weightValue; yOffset += 0.5) {\r\n          for (let xOffset = -weightValue; xOffset < weightValue; xOffset += 0.5) {\r\n            // -- set base matrix to translate canvas pixel coordinates -> webgl coordinates\r\n            mapMatrix\r\n              .set(pixelsToWebGLMatrix)\r\n              .scaleMatrix(scale)\r\n              .translateMatrix(-offset.x + (xOffset / scale), -offset.y + (yOffset / scale));\r\n            // -- attach matrix value to 'mapMatrix' uniform in shader\r\n            gl.uniformMatrix4fv(this.matrix, false, mapMatrix.array);\r\n\r\n            gl.drawArrays(gl.LINES, allVertexCount, vertexCount);\r\n          }\r\n        }\r\n        allVertexCount += vertexCount;\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  static tryClick(e: LeafletMouseEvent, map: Map): void {\r\n    let foundFeature = false\r\n      , instance = null\r\n      , record = 0.1\r\n      , settings\r\n      ;\r\n    Lines.instances.forEach(function (_instance) {\r\n      settings = _instance.settings;\r\n      if (!_instance.active) return;\r\n      if (settings.map !== map) return;\r\n      if (!settings.click) return;\r\n\r\n      settings.data.features.map(feature => {\r\n        for (let i = 1; i < feature.geometry.coordinates.length; i++) {\r\n          let distance = pDistance(e.latlng.lng, e.latlng.lat,\r\n            feature.geometry.coordinates[i - 1][0], feature.geometry.coordinates[i - 1][1],\r\n            feature.geometry.coordinates[i][0], feature.geometry.coordinates[i][1]);\r\n          if (distance < record) {\r\n            record = distance;\r\n            foundFeature = feature;\r\n            instance = _instance;\r\n          }\r\n        }\r\n      });\r\n    });\r\n\r\n    if (instance) {\r\n      instance.settings.click(e, foundFeature);\r\n    } else {\r\n      return;\r\n    }\r\n  }\r\n}\r\n","import { Feature, Point as GeoPoint } from 'geojson';\r\n\r\nimport { Base, IBaseSettings } from './base';\r\nimport { ICanvasOverlayDrawEvent } from './canvas-overlay';\r\nimport { Color, IColor } from './color';\r\nimport { LeafletMouseEvent, Map, Point, LatLng, Projection } from './leaflet-bindings';\r\nimport { IPixel } from './pixel';\r\nimport { locationDistance, pointInCircle } from './utils';\r\n\r\nexport interface IPointsSettings extends IBaseSettings {\r\n  size: ((i: number, latLng: LatLng) => number) | number;\r\n  eachVertex?: (this: Points, latLng: LatLng, pixel: IPixel, color: IColor) => void;\r\n  sensitivity?: number;\r\n}\r\n\r\nconst defaults: IPointsSettings = {\r\n  map: null,\r\n  data: [],\r\n  longitudeKey: null,\r\n  latitudeKey: null,\r\n  setupClick: null,\r\n  vertexShaderSource: null,\r\n  fragmentShaderSource: null,\r\n  eachVertex: null,\r\n  click: null,\r\n  color: Color.random,\r\n  opacity: 0.8,\r\n  size: null,\r\n  className: '',\r\n  sensitivity: 2,\r\n  shaderVariables: {\r\n    vertex: {\r\n      type: 'FLOAT',\r\n      start: 0,\r\n      size: 2,\r\n      bytes: 6\r\n    },\r\n    color: {\r\n      type: 'FLOAT',\r\n      start: 2,\r\n      size: 3,\r\n      bytes: 6\r\n    },\r\n    pointSize: {\r\n      type: 'FLOAT',\r\n      start: 5,\r\n      size: 1,\r\n      bytes: 6\r\n    },\r\n  }\r\n};\r\n\r\nexport interface IPointLookup {\r\n  latLng: LatLng;\r\n  pixel: IPixel;\r\n  chosenColor: IColor;\r\n  chosenSize: number;\r\n  key: string;\r\n  feature?: any;\r\n}\r\n\r\nexport class Points extends Base<IPointsSettings> {\r\n  static instances: Points[] = [];\r\n  static defaults = defaults;\r\n  static maps = [];\r\n  latLngLookup: {\r\n    [key: string]: IPointLookup[];\r\n  };\r\n  allLatLngLookup: IPointLookup[];\r\n  vertices: number[];\r\n  dataFormat: 'Array' | 'GeoJson.FeatureCollection';\r\n\r\n  constructor(settings) {\r\n    super(settings);\r\n    Points.instances.push(this);\r\n    this.settings = {...Points.defaults, ...settings};\r\n\r\n    if (!settings.data) throw new Error('no \"data\" array setting defined');\r\n    if (!settings.map) throw new Error('no leaflet \"map\" object setting defined');\r\n\r\n    this.active = true;\r\n\r\n    const { data } = this.settings;\r\n    if (Array.isArray(data)) {\r\n      this.dataFormat = 'Array';\r\n    } else if (data.type === 'FeatureCollection') {\r\n      this.dataFormat = 'GeoJson.FeatureCollection';\r\n    } else {\r\n      throw new Error('unhandled data type. Supported types are Array and GeoJson.FeatureCollection');\r\n    }\r\n\r\n    // @ts-ignore\r\n    if (this.settings.map.options.crs.projection.project !== Projection.SphericalMercator.project) {\r\n      console.warn('layer designed for SphericalMercator, alternate detected');\r\n    }\r\n\r\n    this\r\n      .setup()\r\n      .render();\r\n  }\r\n\r\n  render(): this {\r\n\r\n    this.resetVertices();\r\n\r\n    //look up the locations for the inputs to our shaders.\r\n    const { gl, settings, canvas, program, layer, vertices, pixelsToWebGLMatrix } = this\r\n      , matrix = this.matrix = gl.getUniformLocation(program, 'matrix')\r\n      , opacity = gl.getUniformLocation(program, 'opacity')\r\n      , vertexBuffer = gl.createBuffer()\r\n      , vertexArray = new Float32Array(vertices)\r\n      , byteCount = vertexArray.BYTES_PER_ELEMENT\r\n      ;\r\n\r\n    //set the matrix to some that makes 1 unit 1 pixel.\r\n    pixelsToWebGLMatrix.set([\r\n      2 / canvas.width, 0, 0, 0,\r\n      0, -2 / canvas.height, 0, 0,\r\n      0, 0, 0, 0,\r\n      -1, 1, 0, 1\r\n    ]);\r\n\r\n    gl.viewport(0, 0, canvas.width, canvas.height);\r\n    gl.uniformMatrix4fv(matrix, false, pixelsToWebGLMatrix);\r\n    gl.uniform1f(opacity, settings.opacity);\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\r\n    gl.bufferData(gl.ARRAY_BUFFER, vertexArray, gl.STATIC_DRAW);\r\n\r\n    this.attachShaderVariables(byteCount);\r\n\r\n    layer.redraw();\r\n\r\n    return this;\r\n  }\r\n\r\n  resetVertices() {\r\n    //empty vertices and repopulate\r\n    this.latLngLookup = {};\r\n    this.allLatLngLookup = [];\r\n    this.vertices = [];\r\n\r\n    const { vertices, latLngLookup } = this\r\n      , { latitudeKey, longitudeKey, data, map, eachVertex } = this.settings\r\n      ;\r\n    let colorFn: (i: number, latLng: LatLng | any) => IColor\r\n      , { color, size } = this.settings\r\n      , chosenColor\r\n      , chosenSize\r\n      , sizeFn\r\n      , latLng\r\n      , pixel: Point\r\n      , key\r\n      ;\r\n\r\n    if (!color) {\r\n      throw new Error('color is not properly defined');\r\n    } else if (typeof color === 'function') {\r\n      colorFn = color as (i: number, latLng: LatLng) => IColor;\r\n    }\r\n\r\n    if (!size) {\r\n      throw new Error('size is not properly defined');\r\n    } else if (typeof size === 'function') {\r\n      sizeFn = size;\r\n    }\r\n\r\n    if (this.dataFormat === 'Array') {\r\n      const max = data.length;\r\n      for (let i = 0; i < max; i++) {\r\n        latLng = data[i];\r\n        key = latLng[latitudeKey].toFixed(2) + 'x' + latLng[longitudeKey].toFixed(2);\r\n        pixel = map.project(new LatLng(latLng[latitudeKey], latLng[longitudeKey]), 0);\r\n\r\n        if (colorFn) {\r\n          chosenColor = colorFn(i, latLng) as IColor;\r\n        } else {\r\n          chosenColor = color as IColor;\r\n        }\r\n\r\n        if (sizeFn) {\r\n          chosenSize = sizeFn(i, latLng) as number;\r\n        } else {\r\n          chosenSize = size as number;\r\n        }\r\n\r\n        //-- 2 coord, 3 rgb colors, 1 size interleaved buffer\r\n        vertices.push(pixel.x, pixel.y, chosenColor.r, chosenColor.g, chosenColor.b, chosenSize);\r\n\r\n        const lookup = { latLng, key, pixel, chosenColor, chosenSize };\r\n        (latLngLookup[key] || (latLngLookup[key] = []))\r\n          .push(lookup);\r\n        this.allLatLngLookup.push(lookup);\r\n        if (eachVertex) {\r\n          eachVertex.call(this, latLng, pixel, chosenSize);\r\n        }\r\n      }\r\n    } else if (this.dataFormat === 'GeoJson.FeatureCollection') {\r\n      const max = data.features.length;\r\n      for (let i = 0; i < max; i++) {\r\n        const feature = data.features[i] as Feature<GeoPoint>;\r\n        latLng = feature.geometry.coordinates;\r\n        key = latLng[latitudeKey].toFixed(2) + 'x' + latLng[longitudeKey].toFixed(2);\r\n        pixel = map.project(new LatLng(latLng[latitudeKey], latLng[longitudeKey]), 0);\r\n\r\n        if (colorFn) {\r\n          chosenColor = colorFn(i, feature) as IColor;\r\n        } else {\r\n          chosenColor = color as IColor;\r\n        }\r\n\r\n        if (sizeFn) {\r\n          chosenSize = sizeFn(i, latLng) as number;\r\n        } else {\r\n          chosenSize = size as number;\r\n        }\r\n\r\n        //-- 2 coord, 3 rgb colors, 1 size interleaved buffer\r\n        vertices.push(pixel.x, pixel.y, chosenColor.r, chosenColor.g, chosenColor.b, chosenSize);\r\n\r\n        const lookup = { latLng, key, pixel, chosenColor, chosenSize, feature, };\r\n        (latLngLookup[key] || (latLngLookup[key] = []))\r\n          .push(lookup);\r\n        this.allLatLngLookup.push(lookup);\r\n        if (eachVertex) {\r\n          eachVertex.call(this, latLng, pixel, chosenSize);\r\n        }\r\n      }\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  pointSize(pointIndex): number {\r\n    const { map, size } = this.settings\r\n      , pointSize = typeof size === 'function' ? size(pointIndex, null) : size\r\n      // -- Scale to current zoom\r\n      , zoom = map.getZoom()\r\n      ;\r\n\r\n    return pointSize === null ? Math.max(zoom - 4.0, 1.0) : pointSize;\r\n  }\r\n\r\n  drawOnCanvas(e: ICanvasOverlayDrawEvent): this {\r\n    if (!this.gl) return this;\r\n\r\n    const { gl, canvas, settings, mapMatrix, matrix, pixelsToWebGLMatrix, vertices } = this\r\n      , map = settings.map\r\n      , { offset } = e\r\n      , zoom = map.getZoom()\r\n      , scale = Math.pow(2, zoom)\r\n      ;\r\n\r\n    pixelsToWebGLMatrix.set([\r\n      2 / canvas.width, 0, 0, 0,\r\n      0, -2 / canvas.height, 0, 0,\r\n      0, 0, 0, 0,\r\n      -1, 1, 0, 1\r\n    ]);\r\n\r\n    //set base matrix to translate canvas pixel coordinates -> webgl coordinates\r\n    mapMatrix\r\n      .set(pixelsToWebGLMatrix)\r\n      .scaleMatrix(scale)\r\n      .translateMatrix(-offset.x, -offset.y);\r\n\r\n    gl.clear(gl.COLOR_BUFFER_BIT);\r\n    gl.viewport(0, 0, canvas.width, canvas.height);\r\n    gl.uniformMatrix4fv(matrix, false, mapMatrix.array);\r\n    gl.drawArrays(gl.POINTS, 0, vertices.length / 6);\r\n\r\n    return this;\r\n  }\r\n\r\n  lookup(coords: LatLng): IPointLookup {\r\n    const xMax: number = coords.lat + 0.03\r\n      , yMax: number = coords.lng + 0.03\r\n      , matches: IPointLookup[] = []\r\n      ;\r\n    let x = coords.lat - 0.03\r\n      , y: number\r\n      , foundI: number\r\n      , foundMax: number\r\n      , found: IPointLookup[]\r\n      , key: string\r\n      ;\r\n\r\n    for (; x <= xMax; x += 0.01) {\r\n      y = coords.lng - 0.03;\r\n      for (; y <= yMax; y += 0.01) {\r\n        key = x.toFixed(2) + 'x' + y.toFixed(2);\r\n        found = this.latLngLookup[key];\r\n        if (found) {\r\n          foundI = 0;\r\n          foundMax = found.length;\r\n          for (; foundI < foundMax; foundI++) {\r\n            matches.push(found[foundI]);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    const { map } = this.settings;\r\n\r\n    //try matches first, if it is empty, try the data, and hope it isn't too big\r\n    return Points.closest(\r\n      coords,\r\n      matches.length > 0\r\n        ? matches\r\n        : this.allLatLngLookup,\r\n      map\r\n    );\r\n  }\r\n\r\n  static closest(targetLocation: LatLng, points: IPointLookup[], map: Map): IPointLookup {\r\n    if (points.length < 1) return null;\r\n    return points.reduce((prev, curr) => {\r\n      const prevDistance = locationDistance(targetLocation, prev.latLng, map)\r\n        , currDistance = locationDistance(targetLocation, curr.latLng, map)\r\n        ;\r\n      return (prevDistance < currDistance) ? prev : curr;\r\n    });\r\n  }\r\n\r\n  static tryClick(e: LeafletMouseEvent, map: Map): boolean | void {\r\n    const closestFromEach: IPointLookup[] = []\r\n      , instancesLookup = {}\r\n      ;\r\n    let result\r\n      , settings: IPointsSettings\r\n      , instance: Points\r\n      , pointLookup: IPointLookup\r\n      , xy: Point\r\n      , found: IPointLookup\r\n      , foundLatLng\r\n      ;\r\n\r\n    Points.instances.forEach((_instance) => {\r\n      settings = _instance.settings;\r\n      if (!_instance.active) return;\r\n      if (settings.map !== map) return;\r\n      if (!settings.click) return;\r\n\r\n      pointLookup = _instance.lookup(e.latlng);\r\n      instancesLookup[pointLookup.key] = _instance;\r\n      closestFromEach.push(pointLookup);\r\n    });\r\n\r\n    if (closestFromEach.length < 1) return;\r\n    if (!settings) return;\r\n\r\n    found = this.closest(e.latlng, closestFromEach, map);\r\n\r\n    if (found === null) return;\r\n\r\n    instance = instancesLookup[found.key];\r\n    if (!instance) return;\r\n    const { latitudeKey, longitudeKey, sensitivity, click } = instance.settings;\r\n\r\n    foundLatLng = new LatLng(found.latLng[latitudeKey], found.latLng[longitudeKey]);\r\n    xy = map.latLngToLayerPoint(foundLatLng);\r\n\r\n    if (pointInCircle(\r\n      xy,\r\n      e.layerPoint,\r\n      found.chosenSize * sensitivity\r\n    )) {\r\n      result = click(e, found.feature || found.latLng, xy);\r\n      return result !== undefined ? result : true;\r\n    }\r\n  }\r\n}\r\n","import earcut from 'earcut';\r\nimport geojsonFlatten from 'geojson-flatten';\r\nimport PolygonLookup from 'polygon-lookup';\r\n\r\nimport { Base, IBaseSettings } from './base';\r\nimport { ICanvasOverlayDrawEvent } from './canvas-overlay';\r\nimport { Color, IColor } from './color';\r\nimport { latLonToPixel } from './utils';\r\nimport { LatLng, LeafletMouseEvent, Map, Point } from './leaflet-bindings';\r\n\r\nexport interface IShapeSettings extends IBaseSettings {\r\n  border: boolean\r\n}\r\n\r\nexport const defaults: IShapeSettings = {\r\n  map: null,\r\n  data: [],\r\n  longitudeKey: null,\r\n  latitudeKey: null,\r\n  setupClick: null,\r\n  vertexShaderSource: null,\r\n  fragmentShaderSource: null,\r\n  click: null,\r\n  color: Color.random,\r\n  border: false,\r\n  className: '',\r\n  opacity: 0.5,\r\n  shaderVariables: {\r\n    color: {\r\n      type: 'FLOAT',\r\n      start: 2,\r\n      size: 3\r\n    }\r\n  }\r\n};\r\n\r\nexport class Shapes extends Base<IShapeSettings> {\r\n  static instances: Shapes[] = [];\r\n  static defaults = defaults;\r\n  static maps: Map[];\r\n  polygonLookup: PolygonLookup;\r\n\r\n  constructor(settings: IShapeSettings) {\r\n    super(settings);\r\n    Shapes.instances.push(this);\r\n    this.settings = { ...Shapes.defaults, ...settings };\r\n\r\n    if (!settings.data) throw new Error('no \"data\" array setting defined');\r\n    if (!settings.map) throw new Error('no leaflet \"map\" object setting defined');\r\n    this.polygonLookup = null;\r\n\r\n    this\r\n      .setup()\r\n      .render();\r\n  }\r\n\r\n  render(): this {\r\n    this.resetVertices();\r\n    // triangles or point count\r\n\r\n    const { pixelsToWebGLMatrix, settings, canvas, gl, layer, vertices, vertsLines, program } = this\r\n      // , vertsLines = new Array\r\n      , vertexBuffer = gl.createBuffer()\r\n      , vertArray = new Float32Array(vertices)\r\n      , byteCount = vertArray.BYTES_PER_ELEMENT\r\n      , vertex = gl.getAttribLocation(program, 'vertex')\r\n      , opacity = gl.getUniformLocation(program, 'opacity')\r\n      ;\r\n    gl.uniform1f(opacity, settings.opacity);\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\r\n    gl.bufferData(gl.ARRAY_BUFFER, vertArray, gl.STATIC_DRAW);\r\n    gl.vertexAttribPointer(vertex, 2, gl.FLOAT, false, byteCount * 5, 0);\r\n    gl.enableVertexAttribArray(vertex);\r\n\r\n    //  gl.disable(gl.DEPTH_TEST);\r\n    // ----------------------------\r\n    // look up the locations for the inputs to our shaders.\r\n    this.matrix = gl.getUniformLocation(program, 'matrix');\r\n\r\n    // Set the matrix to some that makes 1 unit 1 pixel.\r\n    pixelsToWebGLMatrix.set([2 / canvas.width, 0, 0, 0, 0, -2 / canvas.height, 0, 0, 0, 0, 0, 0, -1, 1, 0, 1]);\r\n    gl.viewport(0, 0, canvas.width, canvas.height);\r\n\r\n    gl.uniformMatrix4fv(this.matrix, false, pixelsToWebGLMatrix);\r\n\r\n    this.attachShaderVariables(byteCount);\r\n\r\n    layer.redraw();\r\n\r\n    return this;\r\n  }\r\n\r\n  resetVertices(): this {\r\n    this.vertices = [];\r\n    this.vertsLines = [];\r\n    this.polygonLookup = new PolygonLookup();\r\n\r\n    const { vertices, vertsLines, polygonLookup, settings } = this\r\n      , data = settings.data as any\r\n      ;\r\n\r\n    let pixel\r\n      , index\r\n      , features\r\n      , feature\r\n      , { color } = settings\r\n      , colorFn: (i: number, feature: any) => IColor\r\n      , chosenColor: IColor\r\n      , coordinates\r\n      , featureIndex = 0\r\n      , featureMax\r\n      , triangles\r\n      , indices\r\n      , flat\r\n      , dim\r\n      ;\r\n\r\n    switch (data.type) {\r\n      case 'Feature':\r\n        polygonLookup.loadFeatureCollection({\r\n          type: 'FeatureCollection',\r\n          features: [data]\r\n        });\r\n        features = geojsonFlatten(data);\r\n        break;\r\n      case 'MultiPolygon':\r\n        polygonLookup.loadFeatureCollection({\r\n          type: 'FeatureCollection',\r\n          features: [{\r\n            type: 'Feature',\r\n            properties: { id: 'bar' },\r\n            geometry: { coordinates: data.coordinates }\r\n          }]\r\n        });\r\n        features = geojsonFlatten(data);\r\n        break;\r\n      default:\r\n        polygonLookup.loadFeatureCollection(data);\r\n        features = data.features;\r\n    }\r\n    featureMax = features.length;\r\n\r\n    if (!color) {\r\n      throw new Error('color is not properly defined');\r\n    } else if (typeof color === 'function') {\r\n      colorFn = color;\r\n    }\r\n\r\n    // -- data\r\n    for (; featureIndex < featureMax; featureIndex++) {\r\n      feature = features[featureIndex];\r\n      triangles = [];\r\n\r\n      //use colorFn function here if it exists\r\n      if (colorFn) {\r\n        chosenColor = colorFn(featureIndex, feature);\r\n      } else {\r\n        chosenColor = color as IColor;\r\n      }\r\n\r\n      coordinates = (feature.geometry || feature).coordinates;\r\n      flat = earcut.flatten(coordinates);\r\n      indices = earcut(flat.vertices, flat.holes, flat.dimensions);\r\n      dim = coordinates[0][0].length;\r\n\r\n      for (let i = 0, iMax = indices.length; i < iMax; i++) {\r\n        index = indices[i];\r\n        if (typeof flat.vertices[0] === 'number') {\r\n          triangles.push(flat.vertices[index * dim + settings.longitudeKey], flat.vertices[index * dim + settings.latitudeKey]);\r\n        } else {\r\n          throw new Error('unhandled polygon');\r\n        }\r\n      }\r\n\r\n      for (let i = 0, iMax = triangles.length; i < iMax; i) {\r\n        pixel = settings.map.project(new LatLng(triangles[i++], triangles[i++]), 0);\r\n        vertices.push(pixel.x, pixel.y, chosenColor.r, chosenColor.g, chosenColor.b);\r\n      }\r\n\r\n      if (settings.border) {\r\n        let lines = [];\r\n        for (let i = 1, iMax = flat.vertices.length; i < iMax; i=i+2) {\r\n          lines.push(flat.vertices[i], flat.vertices[i-1]);\r\n          lines.push(flat.vertices[i+2], flat.vertices[i+1]);\r\n        }\r\n\r\n        for (let i = 0, iMax = lines.length; i < iMax; i) {\r\n          pixel = latLonToPixel(lines[i++],lines[i++]);\r\n          vertsLines.push(pixel.x, pixel.y, chosenColor.r, chosenColor.g, chosenColor.b);\r\n        }\r\n      }\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  drawOnCanvas(e: ICanvasOverlayDrawEvent): this {\r\n    if (!this.gl) return this;\r\n\r\n    const { scale, offset, canvas } = e\r\n      , mapMatrix = this.mapMatrix\r\n      , pixelsToWebGLMatrix = this.pixelsToWebGLMatrix\r\n      ;\r\n\r\n    pixelsToWebGLMatrix.set([\r\n      2 / canvas.width, 0, 0, 0,\r\n      0, -2 / canvas.height, 0, 0,\r\n      0, 0, 0, 0,\r\n      -1, 1, 0, 1\r\n    ]);\r\n\r\n    // -- set base matrix to translate canvas pixel coordinates -> webgl coordinates\r\n    mapMatrix\r\n      .set(pixelsToWebGLMatrix)\r\n      .scaleMatrix(scale)\r\n      .translateMatrix(-offset.x, -offset.y);\r\n\r\n    const gl = this.gl;\r\n    gl.clear(gl.COLOR_BUFFER_BIT);\r\n    gl.viewport(0, 0, canvas.width, canvas.height);\r\n    \r\n    // -- attach matrix value to 'mapMatrix' uniform in shader\r\n    gl.uniformMatrix4fv(this.matrix, false, mapMatrix.array);\r\n    \r\n    if (this.settings.border) {\r\n      var vertsLines = this.vertsLines,\r\n      vertexBuffer = gl.createBuffer(),\r\n      vertArray = new Float32Array(vertsLines),\r\n      size = vertArray.BYTES_PER_ELEMENT,\r\n      program = this.program,\r\n      vertex = gl.getAttribLocation(program, 'vertex'),\r\n      opacity = gl.getUniformLocation(program, 'opacity');\r\n\r\n      gl.uniform1f(opacity, 1);\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\r\n      gl.bufferData(gl.ARRAY_BUFFER,vertArray, gl.STATIC_DRAW );\r\n\r\n      if (this.settings.shaderVariables !== null) {\r\n        this.attachShaderVariables(size);\r\n      }\r\n\r\n      gl.vertexAttribPointer(vertex, 3, gl.FLOAT, false, size *5, 0);\r\n      gl.enableVertexAttribArray(vertex);\r\n      gl.enable(gl.DEPTH_TEST);\r\n      gl.viewport(0,0,canvas.width, canvas.height);\r\n      gl.drawArrays(gl.LINES, 0, this.vertsLines.length / 5);\r\n    \r\n      var vertices = this.vertices,\r\n      vertexBuffer = gl.createBuffer(),\r\n      vertArray = new Float32Array(vertices),\r\n      size = vertArray.BYTES_PER_ELEMENT,\r\n      program = this.program,\r\n      vertex = gl.getAttribLocation(program, 'vertex'),\r\n      opacity = gl.getUniformLocation(program, 'opacity');\r\n\r\n      gl.uniform1f(opacity, this.settings.opacity);\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\r\n      gl.bufferData(gl.ARRAY_BUFFER,vertArray, gl.STATIC_DRAW );\r\n\r\n      if (this.settings.shaderVariables !== null) {\r\n        this.attachShaderVariables(size);\r\n      }\r\n\r\n      gl.vertexAttribPointer(vertex, 2, gl.FLOAT, false, size *5, 0);\r\n      gl.enableVertexAttribArray(vertex);\r\n      gl.enable(gl.DEPTH_TEST);\r\n      gl.viewport(0,0,canvas.width, canvas.height);\r\n    }\r\n\r\n    gl.drawArrays(gl.TRIANGLES, 0, this.vertices.length / 5);\r\n\r\n    return this;\r\n  }\r\n\r\n  static tryClick(e: LeafletMouseEvent, map: Map): boolean {\r\n    let result\r\n      , settings\r\n      , feature\r\n      ;\r\n\r\n    Shapes.instances.forEach(function (_instance) {\r\n      settings = _instance.settings;\r\n      if (!_instance.active) return;\r\n      if (settings.map !== map) return;\r\n      if (!settings.click) return;\r\n\r\n      feature = _instance.polygonLookup.search(e.latlng.lng, e.latlng.lat);\r\n      if (feature) {\r\n        result = settings.click(e, feature);\r\n      }\r\n    });\r\n\r\n    return result !== undefined ? result : true;\r\n  }\r\n}\r\n","import { LeafletMouseEvent, Map } from './leaflet-bindings';\r\n\r\nimport { Lines, ILinesSettings } from './lines';\r\nimport { MapMatrix } from './map-matrix';\r\nimport { Points, IPointsSettings } from './points';\r\nimport { IShapeSettings, Shapes } from './shapes';\r\n\r\n// @ts-ignore\r\nimport vertex from './shader/vertex/default.glsl';\r\n// @ts-ignore\r\nimport dot from './shader/fragment/dot.glsl';\r\n// @ts-ignore\r\nimport point from './shader/fragment/point.glsl';\r\n// @ts-ignore\r\nimport puck from './shader/fragment/puck.glsl';\r\n// @ts-ignore\r\nimport simpleCircle from './shader/fragment/simple-circle.glsl';\r\n// @ts-ignore\r\nimport square from './shader/fragment/square.glsl';\r\n// @ts-ignore\r\nimport polygon from './shader/fragment/polygon.glsl';\r\n\r\nconst shader = {\r\n  vertex,\r\n  fragment: {\r\n    dot,\r\n    point,\r\n    puck,\r\n    simpleCircle,\r\n    square,\r\n    polygon,\r\n  }\r\n};\r\n\r\nclass Glify {\r\n  longitudeKey: number = 1;\r\n  latitudeKey: number = 0;\r\n  maps: Map[] = [];\r\n  shader = shader;\r\n\r\n  Points: typeof Points = Points;\r\n  Shapes: typeof Shapes = Shapes;\r\n  Lines: typeof Lines = Lines;\r\n\r\n  longitudeFirst(): this {\r\n    this.longitudeKey = 0;\r\n    this.latitudeKey = 1;\r\n    return this;\r\n  }\r\n\r\n  latitudeFirst(): this {\r\n    this.latitudeKey = 0;\r\n    this.longitudeKey = 1;\r\n    return this;\r\n  }\r\n\r\n  get instances() {\r\n    return [\r\n      ...Points.instances,\r\n      ...Lines.instances,\r\n      ...Shapes.instances,\r\n    ];\r\n  }\r\n\r\n  points(settings: IPointsSettings): Points {\r\n    return new this.Points({\r\n      setupClick: glify.setupClick.bind(this),\r\n      latitudeKey: glify.latitudeKey,\r\n      longitudeKey: glify.longitudeKey,\r\n      vertexShaderSource: () => {\r\n        return this.shader.vertex;\r\n      },\r\n      fragmentShaderSource: () => {\r\n        return this.shader.fragment.point;\r\n      },\r\n      ...settings,\r\n    });\r\n  }\r\n\r\n  shapes(settings: IShapeSettings): Shapes {\r\n    return new this.Shapes({\r\n      setupClick: this.setupClick.bind(this),\r\n      latitudeKey: this.latitudeKey,\r\n      longitudeKey: this.longitudeKey,\r\n      vertexShaderSource: () => {\r\n        return this.shader.vertex;\r\n      },\r\n      fragmentShaderSource: () => {\r\n        return this.shader.fragment.polygon;\r\n      },\r\n      ...settings\r\n    });\r\n  }\r\n\r\n  lines(settings: ILinesSettings): Lines {\r\n    return new this.Lines({\r\n      setupClick: this.setupClick.bind(this),\r\n      latitudeKey: this.latitudeKey,\r\n      longitudeKey: this.longitudeKey,\r\n      vertexShaderSource: () => {\r\n        return this.shader.vertex;\r\n      },\r\n      fragmentShaderSource: () => {\r\n        return this.shader.fragment.polygon;\r\n      },\r\n      ...settings\r\n    });\r\n  }\r\n\r\n  setupClick(map?: Map): void {\r\n    if (this.maps.indexOf(map) < 0) {\r\n      this.maps.push(map);\r\n      map.on('click', (e: LeafletMouseEvent) => {\r\n        let hit;\r\n        hit = Points.tryClick(e, map);\r\n        if (hit !== undefined) return hit;\r\n\r\n        hit = Lines.tryClick(e, map);\r\n        if (hit !== undefined) return hit;\r\n\r\n        hit = Shapes.tryClick(e, map);\r\n        if (hit !== undefined) return hit;\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nconst glify = new Glify();\r\nexport default module.exports = glify;\r\nif (typeof window !== 'undefined' && window.L) {\r\n  // @ts-ignore\r\n  window['L'].glify = glify;\r\n  // @ts-ignore\r\n  window['L'].Glify = Glify;\r\n}"]}