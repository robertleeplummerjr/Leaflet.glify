!function(t,n){if("object"==typeof exports&&"object"==typeof module)module.exports=n(require("leaflet"));else if("function"==typeof define&&define.amd)define(["leaflet"],n);else{var r="object"==typeof exports?n(require("leaflet")):n(t.leaflet);for(var e in r)("object"==typeof exports?exports:t)[e]=r[e]}}(window,(function(t){return function(t){var n={};function r(e){if(n[e])return n[e].exports;var i=n[e]={i:e,l:!1,exports:{}};return t[e].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=t,r.c=n,r.d=function(t,n,e){r.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:e})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,n){if(1&n&&(t=r(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var e=Object.create(null);if(r.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var i in t)r.d(e,i,function(n){return t[n]}.bind(null,i));return e},r.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(n,"a",n),n},r.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},r.p="",r(r.s=10)}([function(n,r){n.exports=t},function(t,n,r){"use strict";function e(t,n,r){r=r||2;var e,a,s,c,f,v,d,g=n&&n.length,y=g?n[0]*r:t.length,_=i(t,0,y,r,!0),m=[];if(!_||_.next===_.prev)return m;if(g&&(_=function(t,n,r,e){var u,a,s,c,f,v=[];for(u=0,a=n.length;u<a;u++)s=n[u]*e,c=u<a-1?n[u+1]*e:t.length,(f=i(t,s,c,e,!1))===f.next&&(f.steiner=!0),v.push(p(f));for(v.sort(l),u=0;u<v.length;u++)h(v[u],r),r=o(r,r.next);return r}(t,n,_,r)),t.length>80*r){e=s=t[0],a=c=t[1];for(var x=r;x<y;x+=r)(f=t[x])<e&&(e=f),(v=t[x+1])<a&&(a=v),f>s&&(s=f),v>c&&(c=v);d=0!==(d=Math.max(s-e,c-a))?1/d:0}return u(_,m,r,e,a,d),m}function i(t,n,r,e,i){var o,u;if(i===A(t,n,r,e)>0)for(o=n;o<r;o+=e)u=w(o,t[o],t[o+1],u);else for(o=r-e;o>=n;o-=e)u=w(o,t[o],t[o+1],u);return u&&_(u,u.next)&&(S(u),u=u.next),u}function o(t,n){if(!t)return t;n||(n=t);var r,e=t;do{if(r=!1,e.steiner||!_(e,e.next)&&0!==y(e.prev,e,e.next))e=e.next;else{if(S(e),(e=n=e.prev)===e.next)break;r=!0}}while(r||e!==n);return n}function u(t,n,r,e,i,l,h){if(t){!h&&l&&function(t,n,r,e){var i=t;do{null===i.z&&(i.z=v(i.x,i.y,n,r,e)),i.prevZ=i.prev,i.nextZ=i.next,i=i.next}while(i!==t);i.prevZ.nextZ=null,i.prevZ=null,function(t){var n,r,e,i,o,u,a,s,c=1;do{for(r=t,t=null,o=null,u=0;r;){for(u++,e=r,a=0,n=0;n<c&&(a++,e=e.nextZ);n++);for(s=c;a>0||s>0&&e;)0!==a&&(0===s||!e||r.z<=e.z)?(i=r,r=r.nextZ,a--):(i=e,e=e.nextZ,s--),o?o.nextZ=i:t=i,i.prevZ=o,o=i;r=e}o.nextZ=null,c*=2}while(u>1)}(i)}(t,e,i,l);for(var p,d,g=t;t.prev!==t.next;)if(p=t.prev,d=t.next,l?s(t,e,i,l):a(t))n.push(p.i/r),n.push(t.i/r),n.push(d.i/r),S(t),t=d.next,g=d.next;else if((t=d)===g){h?1===h?u(t=c(t,n,r),n,r,e,i,l,2):2===h&&f(t,n,r,e,i,l):u(o(t),n,r,e,i,l,1);break}}}function a(t){var n=t.prev,r=t,e=t.next;if(y(n,r,e)>=0)return!1;for(var i=t.next.next;i!==t.prev;){if(d(n.x,n.y,r.x,r.y,e.x,e.y,i.x,i.y)&&y(i.prev,i,i.next)>=0)return!1;i=i.next}return!0}function s(t,n,r,e){var i=t.prev,o=t,u=t.next;if(y(i,o,u)>=0)return!1;for(var a=i.x<o.x?i.x<u.x?i.x:u.x:o.x<u.x?o.x:u.x,s=i.y<o.y?i.y<u.y?i.y:u.y:o.y<u.y?o.y:u.y,c=i.x>o.x?i.x>u.x?i.x:u.x:o.x>u.x?o.x:u.x,f=i.y>o.y?i.y>u.y?i.y:u.y:o.y>u.y?o.y:u.y,l=v(a,s,n,r,e),h=v(c,f,n,r,e),p=t.prevZ,g=t.nextZ;p&&p.z>=l&&g&&g.z<=h;){if(p!==t.prev&&p!==t.next&&d(i.x,i.y,o.x,o.y,u.x,u.y,p.x,p.y)&&y(p.prev,p,p.next)>=0)return!1;if(p=p.prevZ,g!==t.prev&&g!==t.next&&d(i.x,i.y,o.x,o.y,u.x,u.y,g.x,g.y)&&y(g.prev,g,g.next)>=0)return!1;g=g.nextZ}for(;p&&p.z>=l;){if(p!==t.prev&&p!==t.next&&d(i.x,i.y,o.x,o.y,u.x,u.y,p.x,p.y)&&y(p.prev,p,p.next)>=0)return!1;p=p.prevZ}for(;g&&g.z<=h;){if(g!==t.prev&&g!==t.next&&d(i.x,i.y,o.x,o.y,u.x,u.y,g.x,g.y)&&y(g.prev,g,g.next)>=0)return!1;g=g.nextZ}return!0}function c(t,n,r){var e=t;do{var i=e.prev,o=e.next.next;!_(i,o)&&m(i,e,e.next,o)&&x(i,o)&&x(o,i)&&(n.push(i.i/r),n.push(e.i/r),n.push(o.i/r),S(e),S(e.next),e=t=o),e=e.next}while(e!==t);return e}function f(t,n,r,e,i,a){var s=t;do{for(var c=s.next.next;c!==s.prev;){if(s.i!==c.i&&g(s,c)){var f=b(s,c);return s=o(s,s.next),f=o(f,f.next),u(s,n,r,e,i,a),void u(f,n,r,e,i,a)}c=c.next}s=s.next}while(s!==t)}function l(t,n){return t.x-n.x}function h(t,n){if(n=function(t,n){var r,e=n,i=t.x,o=t.y,u=-1/0;do{if(o<=e.y&&o>=e.next.y&&e.next.y!==e.y){var a=e.x+(o-e.y)*(e.next.x-e.x)/(e.next.y-e.y);if(a<=i&&a>u){if(u=a,a===i){if(o===e.y)return e;if(o===e.next.y)return e.next}r=e.x<e.next.x?e:e.next}}e=e.next}while(e!==n);if(!r)return null;if(i===u)return r.prev;var s,c=r,f=r.x,l=r.y,h=1/0;e=r.next;for(;e!==c;)i>=e.x&&e.x>=f&&i!==e.x&&d(o<l?i:u,o,f,l,o<l?u:i,o,e.x,e.y)&&((s=Math.abs(o-e.y)/(i-e.x))<h||s===h&&e.x>r.x)&&x(e,t)&&(r=e,h=s),e=e.next;return r}(t,n)){var r=b(n,t);o(r,r.next)}}function v(t,n,r,e,i){return(t=1431655765&((t=858993459&((t=252645135&((t=16711935&((t=32767*(t-r)*i)|t<<8))|t<<4))|t<<2))|t<<1))|(n=1431655765&((n=858993459&((n=252645135&((n=16711935&((n=32767*(n-e)*i)|n<<8))|n<<4))|n<<2))|n<<1))<<1}function p(t){var n=t,r=t;do{(n.x<r.x||n.x===r.x&&n.y<r.y)&&(r=n),n=n.next}while(n!==t);return r}function d(t,n,r,e,i,o,u,a){return(i-u)*(n-a)-(t-u)*(o-a)>=0&&(t-u)*(e-a)-(r-u)*(n-a)>=0&&(r-u)*(o-a)-(i-u)*(e-a)>=0}function g(t,n){return t.next.i!==n.i&&t.prev.i!==n.i&&!function(t,n){var r=t;do{if(r.i!==t.i&&r.next.i!==t.i&&r.i!==n.i&&r.next.i!==n.i&&m(r,r.next,t,n))return!0;r=r.next}while(r!==t);return!1}(t,n)&&x(t,n)&&x(n,t)&&function(t,n){var r=t,e=!1,i=(t.x+n.x)/2,o=(t.y+n.y)/2;do{r.y>o!=r.next.y>o&&r.next.y!==r.y&&i<(r.next.x-r.x)*(o-r.y)/(r.next.y-r.y)+r.x&&(e=!e),r=r.next}while(r!==t);return e}(t,n)}function y(t,n,r){return(n.y-t.y)*(r.x-n.x)-(n.x-t.x)*(r.y-n.y)}function _(t,n){return t.x===n.x&&t.y===n.y}function m(t,n,r,e){return!!(_(t,n)&&_(r,e)||_(t,e)&&_(r,n))||y(t,n,r)>0!=y(t,n,e)>0&&y(r,e,t)>0!=y(r,e,n)>0}function x(t,n){return y(t.prev,t,t.next)<0?y(t,n,t.next)>=0&&y(t,t.prev,n)>=0:y(t,n,t.prev)<0||y(t,t.next,n)<0}function b(t,n){var r=new L(t.i,t.x,t.y),e=new L(n.i,n.x,n.y),i=t.next,o=n.prev;return t.next=n,n.prev=t,r.next=i,i.prev=r,e.next=r,r.prev=e,o.next=e,e.prev=o,e}function w(t,n,r,e){var i=new L(t,n,r);return e?(i.next=e.next,i.prev=e,e.next.prev=i,e.next=i):(i.prev=i,i.next=i),i}function S(t){t.next.prev=t.prev,t.prev.next=t.next,t.prevZ&&(t.prevZ.nextZ=t.nextZ),t.nextZ&&(t.nextZ.prevZ=t.prevZ)}function L(t,n,r){this.i=t,this.x=n,this.y=r,this.prev=null,this.next=null,this.z=null,this.prevZ=null,this.nextZ=null,this.steiner=!1}function A(t,n,r,e){for(var i=0,o=n,u=r-e;o<r;o+=e)i+=(t[u]-t[o])*(t[o+1]+t[u+1]),u=o;return i}t.exports=e,t.exports.default=e,e.deviation=function(t,n,r,e){var i=n&&n.length,o=i?n[0]*r:t.length,u=Math.abs(A(t,0,o,r));if(i)for(var a=0,s=n.length;a<s;a++){var c=n[a]*r,f=a<s-1?n[a+1]*r:t.length;u-=Math.abs(A(t,c,f,r))}var l=0;for(a=0;a<e.length;a+=3){var h=e[a]*r,v=e[a+1]*r,p=e[a+2]*r;l+=Math.abs((t[h]-t[p])*(t[v+1]-t[h+1])-(t[h]-t[v])*(t[p+1]-t[h+1]))}return 0===u&&0===l?0:Math.abs((l-u)/u)},e.flatten=function(t){for(var n=t[0][0].length,r={vertices:[],holes:[],dimensions:n},e=0,i=0;i<t.length;i++){for(var o=0;o<t[i].length;o++)for(var u=0;u<n;u++)r.vertices.push(t[i][o][u]);i>0&&(e+=t[i-1].length,r.holes.push(e))}return r}},function(t,n,r){"use strict";var e=r(3),i=r(5),o=r(6),u=r(7);function a(t){void 0!==t&&this.loadFeatureCollection(t)}function s(t,n){var r=n.geometry.coordinates[0];if(i(t,r)){for(var e=1;e<n.geometry.coordinates.length;e++)if(i(t,n.geometry.coordinates[e]))return!1;return!0}return!1}a.prototype.searchForOnePolygon=function(t,n){var r=this.rtree.search({minX:t,minY:n,maxX:t,maxY:n}),e=[t,n],i=r.map((function(t,n){return this.polygons[r[n].polyId]}),this);return u.find(i,(function(t){return s(e,t)}))},a.prototype.searchForMultiplePolygons=function(t,n,r){-1===r&&(r=Number.MAX_SAFE_INTEGER);var e=[t,n],i=this.rtree.search({minX:t,minY:n,maxX:t,maxY:n}),o=i.map((function(t,n){return this.polygons[i[n].polyId]}),this),u=0;return{type:"FeatureCollection",features:o=o.filter((function(t){return!(u>=r)&&(!!s(e,t)&&(u++,!0))}))}},a.prototype.search=function(t,n,r){return void 0===r?this.searchForOnePolygon(t,n):this.searchForMultiplePolygons(t,n,r)},a.prototype.loadFeatureCollection=function(t){var n=[],r=[],i=0;function u(t){r.push(t);var e=o.getBoundingBox(t.geometry.coordinates[0]);e.polyId=i++,n.push(e)}t.features.forEach((function(t){if(t.geometry&&void 0!==t.geometry.coordinates[0]&&t.geometry.coordinates[0].length>0)switch(t.geometry.type){case"Polygon":u(t);break;case"MultiPolygon":for(var n=t.geometry.coordinates,r=0;r<n.length;r++){u({type:"Feature",properties:t.properties,geometry:{type:"Polygon",coordinates:n[r]}})}}})),this.rtree=(new e).load(n),this.polygons=r},t.exports=a},function(t,n,r){"use strict";t.exports=i,t.exports.default=i;var e=r(4);function i(t,n){if(!(this instanceof i))return new i(t,n);this._maxEntries=Math.max(4,t||9),this._minEntries=Math.max(2,Math.ceil(.4*this._maxEntries)),n&&this._initFormat(n),this.clear()}function o(t,n,r){if(!r)return n.indexOf(t);for(var e=0;e<n.length;e++)if(r(t,n[e]))return e;return-1}function u(t,n){a(t,0,t.children.length,n,t)}function a(t,n,r,e,i){i||(i=d(null)),i.minX=1/0,i.minY=1/0,i.maxX=-1/0,i.maxY=-1/0;for(var o,u=n;u<r;u++)o=t.children[u],s(i,t.leaf?e(o):o);return i}function s(t,n){return t.minX=Math.min(t.minX,n.minX),t.minY=Math.min(t.minY,n.minY),t.maxX=Math.max(t.maxX,n.maxX),t.maxY=Math.max(t.maxY,n.maxY),t}function c(t,n){return t.minX-n.minX}function f(t,n){return t.minY-n.minY}function l(t){return(t.maxX-t.minX)*(t.maxY-t.minY)}function h(t){return t.maxX-t.minX+(t.maxY-t.minY)}function v(t,n){return t.minX<=n.minX&&t.minY<=n.minY&&n.maxX<=t.maxX&&n.maxY<=t.maxY}function p(t,n){return n.minX<=t.maxX&&n.minY<=t.maxY&&n.maxX>=t.minX&&n.maxY>=t.minY}function d(t){return{children:t,height:1,leaf:!0,minX:1/0,minY:1/0,maxX:-1/0,maxY:-1/0}}function g(t,n,r,i,o){for(var u,a=[n,r];a.length;)(r=a.pop())-(n=a.pop())<=i||(u=n+Math.ceil((r-n)/i/2)*i,e(t,u,n,r,o),a.push(n,u,u,r))}i.prototype={all:function(){return this._all(this.data,[])},search:function(t){var n=this.data,r=[],e=this.toBBox;if(!p(t,n))return r;for(var i,o,u,a,s=[];n;){for(i=0,o=n.children.length;i<o;i++)u=n.children[i],p(t,a=n.leaf?e(u):u)&&(n.leaf?r.push(u):v(t,a)?this._all(u,r):s.push(u));n=s.pop()}return r},collides:function(t){var n=this.data,r=this.toBBox;if(!p(t,n))return!1;for(var e,i,o,u,a=[];n;){for(e=0,i=n.children.length;e<i;e++)if(o=n.children[e],p(t,u=n.leaf?r(o):o)){if(n.leaf||v(t,u))return!0;a.push(o)}n=a.pop()}return!1},load:function(t){if(!t||!t.length)return this;if(t.length<this._minEntries){for(var n=0,r=t.length;n<r;n++)this.insert(t[n]);return this}var e=this._build(t.slice(),0,t.length-1,0);if(this.data.children.length)if(this.data.height===e.height)this._splitRoot(this.data,e);else{if(this.data.height<e.height){var i=this.data;this.data=e,e=i}this._insert(e,this.data.height-e.height-1,!0)}else this.data=e;return this},insert:function(t){return t&&this._insert(t,this.data.height-1),this},clear:function(){return this.data=d([]),this},remove:function(t,n){if(!t)return this;for(var r,e,i,u,a=this.data,s=this.toBBox(t),c=[],f=[];a||c.length;){if(a||(a=c.pop(),e=c[c.length-1],r=f.pop(),u=!0),a.leaf&&-1!==(i=o(t,a.children,n)))return a.children.splice(i,1),c.push(a),this._condense(c),this;u||a.leaf||!v(a,s)?e?(r++,a=e.children[r],u=!1):a=null:(c.push(a),f.push(r),r=0,e=a,a=a.children[0])}return this},toBBox:function(t){return t},compareMinX:c,compareMinY:f,toJSON:function(){return this.data},fromJSON:function(t){return this.data=t,this},_all:function(t,n){for(var r=[];t;)t.leaf?n.push.apply(n,t.children):r.push.apply(r,t.children),t=r.pop();return n},_build:function(t,n,r,e){var i,o=r-n+1,a=this._maxEntries;if(o<=a)return u(i=d(t.slice(n,r+1)),this.toBBox),i;e||(e=Math.ceil(Math.log(o)/Math.log(a)),a=Math.ceil(o/Math.pow(a,e-1))),(i=d([])).leaf=!1,i.height=e;var s,c,f,l,h=Math.ceil(o/a),v=h*Math.ceil(Math.sqrt(a));for(g(t,n,r,v,this.compareMinX),s=n;s<=r;s+=v)for(g(t,s,f=Math.min(s+v-1,r),h,this.compareMinY),c=s;c<=f;c+=h)l=Math.min(c+h-1,f),i.children.push(this._build(t,c,l,e-1));return u(i,this.toBBox),i},_chooseSubtree:function(t,n,r,e){for(var i,o,u,a,s,c,f,h,v,p;e.push(n),!n.leaf&&e.length-1!==r;){for(f=h=1/0,i=0,o=n.children.length;i<o;i++)s=l(u=n.children[i]),v=t,p=u,(c=(Math.max(p.maxX,v.maxX)-Math.min(p.minX,v.minX))*(Math.max(p.maxY,v.maxY)-Math.min(p.minY,v.minY))-s)<h?(h=c,f=s<f?s:f,a=u):c===h&&s<f&&(f=s,a=u);n=a||n.children[0]}return n},_insert:function(t,n,r){var e=this.toBBox,i=r?t:e(t),o=[],u=this._chooseSubtree(i,this.data,n,o);for(u.children.push(t),s(u,i);n>=0&&o[n].children.length>this._maxEntries;)this._split(o,n),n--;this._adjustParentBBoxes(i,o,n)},_split:function(t,n){var r=t[n],e=r.children.length,i=this._minEntries;this._chooseSplitAxis(r,i,e);var o=this._chooseSplitIndex(r,i,e),a=d(r.children.splice(o,r.children.length-o));a.height=r.height,a.leaf=r.leaf,u(r,this.toBBox),u(a,this.toBBox),n?t[n-1].children.push(a):this._splitRoot(r,a)},_splitRoot:function(t,n){this.data=d([t,n]),this.data.height=t.height+1,this.data.leaf=!1,u(this.data,this.toBBox)},_chooseSplitIndex:function(t,n,r){var e,i,o,u,s,c,f,h,v,p,d,g,y,_;for(c=f=1/0,e=n;e<=r-n;e++)i=a(t,0,e,this.toBBox),o=a(t,e,r,this.toBBox),v=i,p=o,d=void 0,g=void 0,y=void 0,_=void 0,d=Math.max(v.minX,p.minX),g=Math.max(v.minY,p.minY),y=Math.min(v.maxX,p.maxX),_=Math.min(v.maxY,p.maxY),u=Math.max(0,y-d)*Math.max(0,_-g),s=l(i)+l(o),u<c?(c=u,h=e,f=s<f?s:f):u===c&&s<f&&(f=s,h=e);return h},_chooseSplitAxis:function(t,n,r){var e=t.leaf?this.compareMinX:c,i=t.leaf?this.compareMinY:f;this._allDistMargin(t,n,r,e)<this._allDistMargin(t,n,r,i)&&t.children.sort(e)},_allDistMargin:function(t,n,r,e){t.children.sort(e);var i,o,u=this.toBBox,c=a(t,0,n,u),f=a(t,r-n,r,u),l=h(c)+h(f);for(i=n;i<r-n;i++)o=t.children[i],s(c,t.leaf?u(o):o),l+=h(c);for(i=r-n-1;i>=n;i--)o=t.children[i],s(f,t.leaf?u(o):o),l+=h(f);return l},_adjustParentBBoxes:function(t,n,r){for(var e=r;e>=0;e--)s(n[e],t)},_condense:function(t){for(var n,r=t.length-1;r>=0;r--)0===t[r].children.length?r>0?(n=t[r-1].children).splice(n.indexOf(t[r]),1):this.clear():u(t[r],this.toBBox)},_initFormat:function(t){var n=["return a"," - b",";"];this.compareMinX=new Function("a","b",n.join(t[0])),this.compareMinY=new Function("a","b",n.join(t[1])),this.toBBox=new Function("a","return {minX: a"+t[0]+", minY: a"+t[1]+", maxX: a"+t[2]+", maxY: a"+t[3]+"};")}}},function(t,n,r){t.exports=function(){"use strict";function t(t,n,r){var e=t[n];t[n]=t[r],t[r]=e}function n(t,n){return t<n?-1:t>n?1:0}return function(r,e,i,o,u){!function n(r,e,i,o,u){for(;o>i;){if(o-i>600){var a=o-i+1,s=e-i+1,c=Math.log(a),f=.5*Math.exp(2*c/3),l=.5*Math.sqrt(c*f*(a-f)/a)*(s-a/2<0?-1:1),h=Math.max(i,Math.floor(e-s*f/a+l)),v=Math.min(o,Math.floor(e+(a-s)*f/a+l));n(r,e,h,v,u)}var p=r[e],d=i,g=o;for(t(r,i,e),u(r[o],p)>0&&t(r,i,o);d<g;){for(t(r,d,g),d++,g--;u(r[d],p)<0;)d++;for(;u(r[g],p)>0;)g--}0===u(r[i],p)?t(r,i,g):(g++,t(r,g,o)),g<=e&&(i=g+1),e<=g&&(o=g-1)}}(r,e,i||0,o||r.length-1,u||n)}}()},function(t,n){t.exports=function(t,n){for(var r=t[0],e=t[1],i=!1,o=0,u=n.length-1;o<n.length;u=o++){var a=n[o][0],s=n[o][1],c=n[u][0],f=n[u][1];s>e!=f>e&&r<(c-a)*(e-s)/(f-s)+a&&(i=!i)}return i}},function(t,n,r){"use strict";t.exports={getBoundingBox:function(t){for(var n=t[0],r={minX:n[0],minY:n[1],maxX:n[0],maxY:n[1]},e=1;e<t.length;e++){var i=t[e],o=i[0];o<r.minX?r.minX=o:o>r.maxX&&(r.maxX=o);var u=i[1];u<r.minY?r.minY=u:u>r.maxY&&(r.maxY=u)}return r}}},function(t,n,r){(function(t,e){var i;
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */(function(){var o="Expected a function",u="__lodash_placeholder__",a=[["ary",128],["bind",1],["bindKey",2],["curry",8],["curryRight",16],["flip",512],["partial",32],["partialRight",64],["rearg",256]],s="[object Arguments]",c="[object Array]",f="[object Boolean]",l="[object Date]",h="[object Error]",v="[object Function]",p="[object GeneratorFunction]",d="[object Map]",g="[object Number]",y="[object Object]",_="[object RegExp]",m="[object Set]",x="[object String]",b="[object Symbol]",w="[object WeakMap]",S="[object ArrayBuffer]",L="[object DataView]",A="[object Float32Array]",j="[object Float64Array]",E="[object Int8Array]",M="[object Int16Array]",k="[object Int32Array]",F="[object Uint8Array]",B="[object Uint16Array]",C="[object Uint32Array]",O=/\b__p \+= '';/g,R=/\b(__p \+=) '' \+/g,z=/(__e\(.*?\)|\b__t\)) \+\n'';/g,P=/&(?:amp|lt|gt|quot|#39);/g,T=/[&<>"']/g,I=RegExp(P.source),Y=RegExp(T.source),N=/<%-([\s\S]+?)%>/g,U=/<%([\s\S]+?)%>/g,D=/<%=([\s\S]+?)%>/g,W=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,Z=/^\w*$/,X=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,K=/[\\^$.*+?()[\]{}|]/g,V=RegExp(K.source),H=/^\s+|\s+$/g,$=/^\s+/,q=/\s+$/,G=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,J=/\{\n\/\* \[wrapped with (.+)\] \*/,Q=/,? & /,tt=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,nt=/\\(\\)?/g,rt=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,et=/\w*$/,it=/^[-+]0x[0-9a-f]+$/i,ot=/^0b[01]+$/i,ut=/^\[object .+?Constructor\]$/,at=/^0o[0-7]+$/i,st=/^(?:0|[1-9]\d*)$/,ct=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,ft=/($^)/,lt=/['\n\r\u2028\u2029\\]/g,ht="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",vt="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",pt="[\\ud800-\\udfff]",dt="["+vt+"]",gt="["+ht+"]",yt="\\d+",_t="[\\u2700-\\u27bf]",mt="[a-z\\xdf-\\xf6\\xf8-\\xff]",xt="[^\\ud800-\\udfff"+vt+yt+"\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",bt="\\ud83c[\\udffb-\\udfff]",wt="[^\\ud800-\\udfff]",St="(?:\\ud83c[\\udde6-\\uddff]){2}",Lt="[\\ud800-\\udbff][\\udc00-\\udfff]",At="[A-Z\\xc0-\\xd6\\xd8-\\xde]",jt="(?:"+mt+"|"+xt+")",Et="(?:"+At+"|"+xt+")",Mt="(?:"+gt+"|"+bt+")"+"?",kt="[\\ufe0e\\ufe0f]?"+Mt+("(?:\\u200d(?:"+[wt,St,Lt].join("|")+")[\\ufe0e\\ufe0f]?"+Mt+")*"),Ft="(?:"+[_t,St,Lt].join("|")+")"+kt,Bt="(?:"+[wt+gt+"?",gt,St,Lt,pt].join("|")+")",Ct=RegExp("['’]","g"),Ot=RegExp(gt,"g"),Rt=RegExp(bt+"(?="+bt+")|"+Bt+kt,"g"),zt=RegExp([At+"?"+mt+"+(?:['’](?:d|ll|m|re|s|t|ve))?(?="+[dt,At,"$"].join("|")+")",Et+"+(?:['’](?:D|LL|M|RE|S|T|VE))?(?="+[dt,At+jt,"$"].join("|")+")",At+"?"+jt+"+(?:['’](?:d|ll|m|re|s|t|ve))?",At+"+(?:['’](?:D|LL|M|RE|S|T|VE))?","\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",yt,Ft].join("|"),"g"),Pt=RegExp("[\\u200d\\ud800-\\udfff"+ht+"\\ufe0e\\ufe0f]"),Tt=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,It=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],Yt=-1,Nt={};Nt[A]=Nt[j]=Nt[E]=Nt[M]=Nt[k]=Nt[F]=Nt["[object Uint8ClampedArray]"]=Nt[B]=Nt[C]=!0,Nt[s]=Nt[c]=Nt[S]=Nt[f]=Nt[L]=Nt[l]=Nt[h]=Nt[v]=Nt[d]=Nt[g]=Nt[y]=Nt[_]=Nt[m]=Nt[x]=Nt[w]=!1;var Ut={};Ut[s]=Ut[c]=Ut[S]=Ut[L]=Ut[f]=Ut[l]=Ut[A]=Ut[j]=Ut[E]=Ut[M]=Ut[k]=Ut[d]=Ut[g]=Ut[y]=Ut[_]=Ut[m]=Ut[x]=Ut[b]=Ut[F]=Ut["[object Uint8ClampedArray]"]=Ut[B]=Ut[C]=!0,Ut[h]=Ut[v]=Ut[w]=!1;var Dt={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},Wt=parseFloat,Zt=parseInt,Xt="object"==typeof t&&t&&t.Object===Object&&t,Kt="object"==typeof self&&self&&self.Object===Object&&self,Vt=Xt||Kt||Function("return this")(),Ht=n&&!n.nodeType&&n,$t=Ht&&"object"==typeof e&&e&&!e.nodeType&&e,qt=$t&&$t.exports===Ht,Gt=qt&&Xt.process,Jt=function(){try{var t=$t&&$t.require&&$t.require("util").types;return t||Gt&&Gt.binding&&Gt.binding("util")}catch(t){}}(),Qt=Jt&&Jt.isArrayBuffer,tn=Jt&&Jt.isDate,nn=Jt&&Jt.isMap,rn=Jt&&Jt.isRegExp,en=Jt&&Jt.isSet,on=Jt&&Jt.isTypedArray;function un(t,n,r){switch(r.length){case 0:return t.call(n);case 1:return t.call(n,r[0]);case 2:return t.call(n,r[0],r[1]);case 3:return t.call(n,r[0],r[1],r[2])}return t.apply(n,r)}function an(t,n,r,e){for(var i=-1,o=null==t?0:t.length;++i<o;){var u=t[i];n(e,u,r(u),t)}return e}function sn(t,n){for(var r=-1,e=null==t?0:t.length;++r<e&&!1!==n(t[r],r,t););return t}function cn(t,n){for(var r=null==t?0:t.length;r--&&!1!==n(t[r],r,t););return t}function fn(t,n){for(var r=-1,e=null==t?0:t.length;++r<e;)if(!n(t[r],r,t))return!1;return!0}function ln(t,n){for(var r=-1,e=null==t?0:t.length,i=0,o=[];++r<e;){var u=t[r];n(u,r,t)&&(o[i++]=u)}return o}function hn(t,n){return!!(null==t?0:t.length)&&wn(t,n,0)>-1}function vn(t,n,r){for(var e=-1,i=null==t?0:t.length;++e<i;)if(r(n,t[e]))return!0;return!1}function pn(t,n){for(var r=-1,e=null==t?0:t.length,i=Array(e);++r<e;)i[r]=n(t[r],r,t);return i}function dn(t,n){for(var r=-1,e=n.length,i=t.length;++r<e;)t[i+r]=n[r];return t}function gn(t,n,r,e){var i=-1,o=null==t?0:t.length;for(e&&o&&(r=t[++i]);++i<o;)r=n(r,t[i],i,t);return r}function yn(t,n,r,e){var i=null==t?0:t.length;for(e&&i&&(r=t[--i]);i--;)r=n(r,t[i],i,t);return r}function _n(t,n){for(var r=-1,e=null==t?0:t.length;++r<e;)if(n(t[r],r,t))return!0;return!1}var mn=jn("length");function xn(t,n,r){var e;return r(t,(function(t,r,i){if(n(t,r,i))return e=r,!1})),e}function bn(t,n,r,e){for(var i=t.length,o=r+(e?1:-1);e?o--:++o<i;)if(n(t[o],o,t))return o;return-1}function wn(t,n,r){return n==n?function(t,n,r){var e=r-1,i=t.length;for(;++e<i;)if(t[e]===n)return e;return-1}(t,n,r):bn(t,Ln,r)}function Sn(t,n,r,e){for(var i=r-1,o=t.length;++i<o;)if(e(t[i],n))return i;return-1}function Ln(t){return t!=t}function An(t,n){var r=null==t?0:t.length;return r?kn(t,n)/r:NaN}function jn(t){return function(n){return null==n?void 0:n[t]}}function En(t){return function(n){return null==t?void 0:t[n]}}function Mn(t,n,r,e,i){return i(t,(function(t,i,o){r=e?(e=!1,t):n(r,t,i,o)})),r}function kn(t,n){for(var r,e=-1,i=t.length;++e<i;){var o=n(t[e]);void 0!==o&&(r=void 0===r?o:r+o)}return r}function Fn(t,n){for(var r=-1,e=Array(t);++r<t;)e[r]=n(r);return e}function Bn(t){return function(n){return t(n)}}function Cn(t,n){return pn(n,(function(n){return t[n]}))}function On(t,n){return t.has(n)}function Rn(t,n){for(var r=-1,e=t.length;++r<e&&wn(n,t[r],0)>-1;);return r}function zn(t,n){for(var r=t.length;r--&&wn(n,t[r],0)>-1;);return r}function Pn(t,n){for(var r=t.length,e=0;r--;)t[r]===n&&++e;return e}var Tn=En({"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"s"}),In=En({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function Yn(t){return"\\"+Dt[t]}function Nn(t){return Pt.test(t)}function Un(t){var n=-1,r=Array(t.size);return t.forEach((function(t,e){r[++n]=[e,t]})),r}function Dn(t,n){return function(r){return t(n(r))}}function Wn(t,n){for(var r=-1,e=t.length,i=0,o=[];++r<e;){var a=t[r];a!==n&&a!==u||(t[r]=u,o[i++]=r)}return o}function Zn(t){var n=-1,r=Array(t.size);return t.forEach((function(t){r[++n]=t})),r}function Xn(t){var n=-1,r=Array(t.size);return t.forEach((function(t){r[++n]=[t,t]})),r}function Kn(t){return Nn(t)?function(t){var n=Rt.lastIndex=0;for(;Rt.test(t);)++n;return n}(t):mn(t)}function Vn(t){return Nn(t)?function(t){return t.match(Rt)||[]}(t):function(t){return t.split("")}(t)}var Hn=En({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"});var $n=function t(n){var r,e=(n=null==n?Vt:$n.defaults(Vt.Object(),n,$n.pick(Vt,It))).Array,i=n.Date,ht=n.Error,vt=n.Function,pt=n.Math,dt=n.Object,gt=n.RegExp,yt=n.String,_t=n.TypeError,mt=e.prototype,xt=vt.prototype,bt=dt.prototype,wt=n["__core-js_shared__"],St=xt.toString,Lt=bt.hasOwnProperty,At=0,jt=(r=/[^.]+$/.exec(wt&&wt.keys&&wt.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"",Et=bt.toString,Mt=St.call(dt),kt=Vt._,Ft=gt("^"+St.call(Lt).replace(K,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Bt=qt?n.Buffer:void 0,Rt=n.Symbol,Pt=n.Uint8Array,Dt=Bt?Bt.allocUnsafe:void 0,Xt=Dn(dt.getPrototypeOf,dt),Kt=dt.create,Ht=bt.propertyIsEnumerable,$t=mt.splice,Gt=Rt?Rt.isConcatSpreadable:void 0,Jt=Rt?Rt.iterator:void 0,mn=Rt?Rt.toStringTag:void 0,En=function(){try{var t=Qi(dt,"defineProperty");return t({},"",{}),t}catch(t){}}(),qn=n.clearTimeout!==Vt.clearTimeout&&n.clearTimeout,Gn=i&&i.now!==Vt.Date.now&&i.now,Jn=n.setTimeout!==Vt.setTimeout&&n.setTimeout,Qn=pt.ceil,tr=pt.floor,nr=dt.getOwnPropertySymbols,rr=Bt?Bt.isBuffer:void 0,er=n.isFinite,ir=mt.join,or=Dn(dt.keys,dt),ur=pt.max,ar=pt.min,sr=i.now,cr=n.parseInt,fr=pt.random,lr=mt.reverse,hr=Qi(n,"DataView"),vr=Qi(n,"Map"),pr=Qi(n,"Promise"),dr=Qi(n,"Set"),gr=Qi(n,"WeakMap"),yr=Qi(dt,"create"),_r=gr&&new gr,mr={},xr=Eo(hr),br=Eo(vr),wr=Eo(pr),Sr=Eo(dr),Lr=Eo(gr),Ar=Rt?Rt.prototype:void 0,jr=Ar?Ar.valueOf:void 0,Er=Ar?Ar.toString:void 0;function Mr(t){if(Zu(t)&&!Ou(t)&&!(t instanceof Cr)){if(t instanceof Br)return t;if(Lt.call(t,"__wrapped__"))return Mo(t)}return new Br(t)}var kr=function(){function t(){}return function(n){if(!Wu(n))return{};if(Kt)return Kt(n);t.prototype=n;var r=new t;return t.prototype=void 0,r}}();function Fr(){}function Br(t,n){this.__wrapped__=t,this.__actions__=[],this.__chain__=!!n,this.__index__=0,this.__values__=void 0}function Cr(t){this.__wrapped__=t,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=4294967295,this.__views__=[]}function Or(t){var n=-1,r=null==t?0:t.length;for(this.clear();++n<r;){var e=t[n];this.set(e[0],e[1])}}function Rr(t){var n=-1,r=null==t?0:t.length;for(this.clear();++n<r;){var e=t[n];this.set(e[0],e[1])}}function zr(t){var n=-1,r=null==t?0:t.length;for(this.clear();++n<r;){var e=t[n];this.set(e[0],e[1])}}function Pr(t){var n=-1,r=null==t?0:t.length;for(this.__data__=new zr;++n<r;)this.add(t[n])}function Tr(t){var n=this.__data__=new Rr(t);this.size=n.size}function Ir(t,n){var r=Ou(t),e=!r&&Cu(t),i=!r&&!e&&Tu(t),o=!r&&!e&&!i&&Ju(t),u=r||e||i||o,a=u?Fn(t.length,yt):[],s=a.length;for(var c in t)!n&&!Lt.call(t,c)||u&&("length"==c||i&&("offset"==c||"parent"==c)||o&&("buffer"==c||"byteLength"==c||"byteOffset"==c)||uo(c,s))||a.push(c);return a}function Yr(t){var n=t.length;return n?t[Pe(0,n-1)]:void 0}function Nr(t,n){return Lo(yi(t),$r(n,0,t.length))}function Ur(t){return Lo(yi(t))}function Dr(t,n,r){(void 0!==r&&!ku(t[n],r)||void 0===r&&!(n in t))&&Vr(t,n,r)}function Wr(t,n,r){var e=t[n];Lt.call(t,n)&&ku(e,r)&&(void 0!==r||n in t)||Vr(t,n,r)}function Zr(t,n){for(var r=t.length;r--;)if(ku(t[r][0],n))return r;return-1}function Xr(t,n,r,e){return te(t,(function(t,i,o){n(e,t,r(t),o)})),e}function Kr(t,n){return t&&_i(n,xa(n),t)}function Vr(t,n,r){"__proto__"==n&&En?En(t,n,{configurable:!0,enumerable:!0,value:r,writable:!0}):t[n]=r}function Hr(t,n){for(var r=-1,i=n.length,o=e(i),u=null==t;++r<i;)o[r]=u?void 0:da(t,n[r]);return o}function $r(t,n,r){return t==t&&(void 0!==r&&(t=t<=r?t:r),void 0!==n&&(t=t>=n?t:n)),t}function qr(t,n,r,e,i,o){var u,a=1&n,c=2&n,h=4&n;if(r&&(u=i?r(t,e,i,o):r(t)),void 0!==u)return u;if(!Wu(t))return t;var w=Ou(t);if(w){if(u=function(t){var n=t.length,r=new t.constructor(n);n&&"string"==typeof t[0]&&Lt.call(t,"index")&&(r.index=t.index,r.input=t.input);return r}(t),!a)return yi(t,u)}else{var O=ro(t),R=O==v||O==p;if(Tu(t))return li(t,a);if(O==y||O==s||R&&!i){if(u=c||R?{}:io(t),!a)return c?function(t,n){return _i(t,no(t),n)}(t,function(t,n){return t&&_i(n,ba(n),t)}(u,t)):function(t,n){return _i(t,to(t),n)}(t,Kr(u,t))}else{if(!Ut[O])return i?t:{};u=function(t,n,r){var e=t.constructor;switch(n){case S:return hi(t);case f:case l:return new e(+t);case L:return function(t,n){var r=n?hi(t.buffer):t.buffer;return new t.constructor(r,t.byteOffset,t.byteLength)}(t,r);case A:case j:case E:case M:case k:case F:case"[object Uint8ClampedArray]":case B:case C:return vi(t,r);case d:return new e;case g:case x:return new e(t);case _:return function(t){var n=new t.constructor(t.source,et.exec(t));return n.lastIndex=t.lastIndex,n}(t);case m:return new e;case b:return i=t,jr?dt(jr.call(i)):{}}var i}(t,O,a)}}o||(o=new Tr);var z=o.get(t);if(z)return z;o.set(t,u),$u(t)?t.forEach((function(e){u.add(qr(e,n,r,e,t,o))})):Xu(t)&&t.forEach((function(e,i){u.set(i,qr(e,n,r,i,t,o))}));var P=w?void 0:(h?c?Ki:Xi:c?ba:xa)(t);return sn(P||t,(function(e,i){P&&(e=t[i=e]),Wr(u,i,qr(e,n,r,i,t,o))})),u}function Gr(t,n,r){var e=r.length;if(null==t)return!e;for(t=dt(t);e--;){var i=r[e],o=n[i],u=t[i];if(void 0===u&&!(i in t)||!o(u))return!1}return!0}function Jr(t,n,r){if("function"!=typeof t)throw new _t(o);return xo((function(){t.apply(void 0,r)}),n)}function Qr(t,n,r,e){var i=-1,o=hn,u=!0,a=t.length,s=[],c=n.length;if(!a)return s;r&&(n=pn(n,Bn(r))),e?(o=vn,u=!1):n.length>=200&&(o=On,u=!1,n=new Pr(n));t:for(;++i<a;){var f=t[i],l=null==r?f:r(f);if(f=e||0!==f?f:0,u&&l==l){for(var h=c;h--;)if(n[h]===l)continue t;s.push(f)}else o(n,l,e)||s.push(f)}return s}Mr.templateSettings={escape:N,evaluate:U,interpolate:D,variable:"",imports:{_:Mr}},Mr.prototype=Fr.prototype,Mr.prototype.constructor=Mr,Br.prototype=kr(Fr.prototype),Br.prototype.constructor=Br,Cr.prototype=kr(Fr.prototype),Cr.prototype.constructor=Cr,Or.prototype.clear=function(){this.__data__=yr?yr(null):{},this.size=0},Or.prototype.delete=function(t){var n=this.has(t)&&delete this.__data__[t];return this.size-=n?1:0,n},Or.prototype.get=function(t){var n=this.__data__;if(yr){var r=n[t];return"__lodash_hash_undefined__"===r?void 0:r}return Lt.call(n,t)?n[t]:void 0},Or.prototype.has=function(t){var n=this.__data__;return yr?void 0!==n[t]:Lt.call(n,t)},Or.prototype.set=function(t,n){var r=this.__data__;return this.size+=this.has(t)?0:1,r[t]=yr&&void 0===n?"__lodash_hash_undefined__":n,this},Rr.prototype.clear=function(){this.__data__=[],this.size=0},Rr.prototype.delete=function(t){var n=this.__data__,r=Zr(n,t);return!(r<0)&&(r==n.length-1?n.pop():$t.call(n,r,1),--this.size,!0)},Rr.prototype.get=function(t){var n=this.__data__,r=Zr(n,t);return r<0?void 0:n[r][1]},Rr.prototype.has=function(t){return Zr(this.__data__,t)>-1},Rr.prototype.set=function(t,n){var r=this.__data__,e=Zr(r,t);return e<0?(++this.size,r.push([t,n])):r[e][1]=n,this},zr.prototype.clear=function(){this.size=0,this.__data__={hash:new Or,map:new(vr||Rr),string:new Or}},zr.prototype.delete=function(t){var n=Gi(this,t).delete(t);return this.size-=n?1:0,n},zr.prototype.get=function(t){return Gi(this,t).get(t)},zr.prototype.has=function(t){return Gi(this,t).has(t)},zr.prototype.set=function(t,n){var r=Gi(this,t),e=r.size;return r.set(t,n),this.size+=r.size==e?0:1,this},Pr.prototype.add=Pr.prototype.push=function(t){return this.__data__.set(t,"__lodash_hash_undefined__"),this},Pr.prototype.has=function(t){return this.__data__.has(t)},Tr.prototype.clear=function(){this.__data__=new Rr,this.size=0},Tr.prototype.delete=function(t){var n=this.__data__,r=n.delete(t);return this.size=n.size,r},Tr.prototype.get=function(t){return this.__data__.get(t)},Tr.prototype.has=function(t){return this.__data__.has(t)},Tr.prototype.set=function(t,n){var r=this.__data__;if(r instanceof Rr){var e=r.__data__;if(!vr||e.length<199)return e.push([t,n]),this.size=++r.size,this;r=this.__data__=new zr(e)}return r.set(t,n),this.size=r.size,this};var te=bi(se),ne=bi(ce,!0);function re(t,n){var r=!0;return te(t,(function(t,e,i){return r=!!n(t,e,i)})),r}function ee(t,n,r){for(var e=-1,i=t.length;++e<i;){var o=t[e],u=n(o);if(null!=u&&(void 0===a?u==u&&!Gu(u):r(u,a)))var a=u,s=o}return s}function ie(t,n){var r=[];return te(t,(function(t,e,i){n(t,e,i)&&r.push(t)})),r}function oe(t,n,r,e,i){var o=-1,u=t.length;for(r||(r=oo),i||(i=[]);++o<u;){var a=t[o];n>0&&r(a)?n>1?oe(a,n-1,r,e,i):dn(i,a):e||(i[i.length]=a)}return i}var ue=wi(),ae=wi(!0);function se(t,n){return t&&ue(t,n,xa)}function ce(t,n){return t&&ae(t,n,xa)}function fe(t,n){return ln(n,(function(n){return Nu(t[n])}))}function le(t,n){for(var r=0,e=(n=ai(n,t)).length;null!=t&&r<e;)t=t[jo(n[r++])];return r&&r==e?t:void 0}function he(t,n,r){var e=n(t);return Ou(t)?e:dn(e,r(t))}function ve(t){return null==t?void 0===t?"[object Undefined]":"[object Null]":mn&&mn in dt(t)?function(t){var n=Lt.call(t,mn),r=t[mn];try{t[mn]=void 0;var e=!0}catch(t){}var i=Et.call(t);e&&(n?t[mn]=r:delete t[mn]);return i}(t):function(t){return Et.call(t)}(t)}function pe(t,n){return t>n}function de(t,n){return null!=t&&Lt.call(t,n)}function ge(t,n){return null!=t&&n in dt(t)}function ye(t,n,r){for(var i=r?vn:hn,o=t[0].length,u=t.length,a=u,s=e(u),c=1/0,f=[];a--;){var l=t[a];a&&n&&(l=pn(l,Bn(n))),c=ar(l.length,c),s[a]=!r&&(n||o>=120&&l.length>=120)?new Pr(a&&l):void 0}l=t[0];var h=-1,v=s[0];t:for(;++h<o&&f.length<c;){var p=l[h],d=n?n(p):p;if(p=r||0!==p?p:0,!(v?On(v,d):i(f,d,r))){for(a=u;--a;){var g=s[a];if(!(g?On(g,d):i(t[a],d,r)))continue t}v&&v.push(d),f.push(p)}}return f}function _e(t,n,r){var e=null==(t=go(t,n=ai(n,t)))?t:t[jo(Yo(n))];return null==e?void 0:un(e,t,r)}function me(t){return Zu(t)&&ve(t)==s}function xe(t,n,r,e,i){return t===n||(null==t||null==n||!Zu(t)&&!Zu(n)?t!=t&&n!=n:function(t,n,r,e,i,o){var u=Ou(t),a=Ou(n),v=u?c:ro(t),p=a?c:ro(n),w=(v=v==s?y:v)==y,A=(p=p==s?y:p)==y,j=v==p;if(j&&Tu(t)){if(!Tu(n))return!1;u=!0,w=!1}if(j&&!w)return o||(o=new Tr),u||Ju(t)?Wi(t,n,r,e,i,o):function(t,n,r,e,i,o,u){switch(r){case L:if(t.byteLength!=n.byteLength||t.byteOffset!=n.byteOffset)return!1;t=t.buffer,n=n.buffer;case S:return!(t.byteLength!=n.byteLength||!o(new Pt(t),new Pt(n)));case f:case l:case g:return ku(+t,+n);case h:return t.name==n.name&&t.message==n.message;case _:case x:return t==n+"";case d:var a=Un;case m:var s=1&e;if(a||(a=Zn),t.size!=n.size&&!s)return!1;var c=u.get(t);if(c)return c==n;e|=2,u.set(t,n);var v=Wi(a(t),a(n),e,i,o,u);return u.delete(t),v;case b:if(jr)return jr.call(t)==jr.call(n)}return!1}(t,n,v,r,e,i,o);if(!(1&r)){var E=w&&Lt.call(t,"__wrapped__"),M=A&&Lt.call(n,"__wrapped__");if(E||M){var k=E?t.value():t,F=M?n.value():n;return o||(o=new Tr),i(k,F,r,e,o)}}if(!j)return!1;return o||(o=new Tr),function(t,n,r,e,i,o){var u=1&r,a=Xi(t),s=a.length,c=Xi(n).length;if(s!=c&&!u)return!1;var f=s;for(;f--;){var l=a[f];if(!(u?l in n:Lt.call(n,l)))return!1}var h=o.get(t),v=o.get(n);if(h&&v)return h==n&&v==t;var p=!0;o.set(t,n),o.set(n,t);var d=u;for(;++f<s;){l=a[f];var g=t[l],y=n[l];if(e)var _=u?e(y,g,l,n,t,o):e(g,y,l,t,n,o);if(!(void 0===_?g===y||i(g,y,r,e,o):_)){p=!1;break}d||(d="constructor"==l)}if(p&&!d){var m=t.constructor,x=n.constructor;m==x||!("constructor"in t)||!("constructor"in n)||"function"==typeof m&&m instanceof m&&"function"==typeof x&&x instanceof x||(p=!1)}return o.delete(t),o.delete(n),p}(t,n,r,e,i,o)}(t,n,r,e,xe,i))}function be(t,n,r,e){var i=r.length,o=i,u=!e;if(null==t)return!o;for(t=dt(t);i--;){var a=r[i];if(u&&a[2]?a[1]!==t[a[0]]:!(a[0]in t))return!1}for(;++i<o;){var s=(a=r[i])[0],c=t[s],f=a[1];if(u&&a[2]){if(void 0===c&&!(s in t))return!1}else{var l=new Tr;if(e)var h=e(c,f,s,t,n,l);if(!(void 0===h?xe(f,c,3,e,l):h))return!1}}return!0}function we(t){return!(!Wu(t)||(n=t,jt&&jt in n))&&(Nu(t)?Ft:ut).test(Eo(t));var n}function Se(t){return"function"==typeof t?t:null==t?Ka:"object"==typeof t?Ou(t)?ke(t[0],t[1]):Me(t):ns(t)}function Le(t){if(!lo(t))return or(t);var n=[];for(var r in dt(t))Lt.call(t,r)&&"constructor"!=r&&n.push(r);return n}function Ae(t){if(!Wu(t))return function(t){var n=[];if(null!=t)for(var r in dt(t))n.push(r);return n}(t);var n=lo(t),r=[];for(var e in t)("constructor"!=e||!n&&Lt.call(t,e))&&r.push(e);return r}function je(t,n){return t<n}function Ee(t,n){var r=-1,i=zu(t)?e(t.length):[];return te(t,(function(t,e,o){i[++r]=n(t,e,o)})),i}function Me(t){var n=Ji(t);return 1==n.length&&n[0][2]?vo(n[0][0],n[0][1]):function(r){return r===t||be(r,t,n)}}function ke(t,n){return so(t)&&ho(n)?vo(jo(t),n):function(r){var e=da(r,t);return void 0===e&&e===n?ga(r,t):xe(n,e,3)}}function Fe(t,n,r,e,i){t!==n&&ue(n,(function(o,u){if(i||(i=new Tr),Wu(o))!function(t,n,r,e,i,o,u){var a=_o(t,r),s=_o(n,r),c=u.get(s);if(c)return void Dr(t,r,c);var f=o?o(a,s,r+"",t,n,u):void 0,l=void 0===f;if(l){var h=Ou(s),v=!h&&Tu(s),p=!h&&!v&&Ju(s);f=s,h||v||p?Ou(a)?f=a:Pu(a)?f=yi(a):v?(l=!1,f=li(s,!0)):p?(l=!1,f=vi(s,!0)):f=[]:Vu(s)||Cu(s)?(f=a,Cu(a)?f=ua(a):Wu(a)&&!Nu(a)||(f=io(s))):l=!1}l&&(u.set(s,f),i(f,s,e,o,u),u.delete(s));Dr(t,r,f)}(t,n,u,r,Fe,e,i);else{var a=e?e(_o(t,u),o,u+"",t,n,i):void 0;void 0===a&&(a=o),Dr(t,u,a)}}),ba)}function Be(t,n){var r=t.length;if(r)return uo(n+=n<0?r:0,r)?t[n]:void 0}function Ce(t,n,r){n=n.length?pn(n,(function(t){return Ou(t)?function(n){return le(n,1===t.length?t[0]:t)}:t})):[Ka];var e=-1;return n=pn(n,Bn(qi())),function(t,n){var r=t.length;for(t.sort(n);r--;)t[r]=t[r].value;return t}(Ee(t,(function(t,r,i){return{criteria:pn(n,(function(n){return n(t)})),index:++e,value:t}})),(function(t,n){return function(t,n,r){var e=-1,i=t.criteria,o=n.criteria,u=i.length,a=r.length;for(;++e<u;){var s=pi(i[e],o[e]);if(s){if(e>=a)return s;var c=r[e];return s*("desc"==c?-1:1)}}return t.index-n.index}(t,n,r)}))}function Oe(t,n,r){for(var e=-1,i=n.length,o={};++e<i;){var u=n[e],a=le(t,u);r(a,u)&&Ue(o,ai(u,t),a)}return o}function Re(t,n,r,e){var i=e?Sn:wn,o=-1,u=n.length,a=t;for(t===n&&(n=yi(n)),r&&(a=pn(t,Bn(r)));++o<u;)for(var s=0,c=n[o],f=r?r(c):c;(s=i(a,f,s,e))>-1;)a!==t&&$t.call(a,s,1),$t.call(t,s,1);return t}function ze(t,n){for(var r=t?n.length:0,e=r-1;r--;){var i=n[r];if(r==e||i!==o){var o=i;uo(i)?$t.call(t,i,1):Qe(t,i)}}return t}function Pe(t,n){return t+tr(fr()*(n-t+1))}function Te(t,n){var r="";if(!t||n<1||n>9007199254740991)return r;do{n%2&&(r+=t),(n=tr(n/2))&&(t+=t)}while(n);return r}function Ie(t,n){return bo(po(t,n,Ka),t+"")}function Ye(t){return Yr(ka(t))}function Ne(t,n){var r=ka(t);return Lo(r,$r(n,0,r.length))}function Ue(t,n,r,e){if(!Wu(t))return t;for(var i=-1,o=(n=ai(n,t)).length,u=o-1,a=t;null!=a&&++i<o;){var s=jo(n[i]),c=r;if("__proto__"===s||"constructor"===s||"prototype"===s)return t;if(i!=u){var f=a[s];void 0===(c=e?e(f,s,a):void 0)&&(c=Wu(f)?f:uo(n[i+1])?[]:{})}Wr(a,s,c),a=a[s]}return t}var De=_r?function(t,n){return _r.set(t,n),t}:Ka,We=En?function(t,n){return En(t,"toString",{configurable:!0,enumerable:!1,value:Wa(n),writable:!0})}:Ka;function Ze(t){return Lo(ka(t))}function Xe(t,n,r){var i=-1,o=t.length;n<0&&(n=-n>o?0:o+n),(r=r>o?o:r)<0&&(r+=o),o=n>r?0:r-n>>>0,n>>>=0;for(var u=e(o);++i<o;)u[i]=t[i+n];return u}function Ke(t,n){var r;return te(t,(function(t,e,i){return!(r=n(t,e,i))})),!!r}function Ve(t,n,r){var e=0,i=null==t?e:t.length;if("number"==typeof n&&n==n&&i<=2147483647){for(;e<i;){var o=e+i>>>1,u=t[o];null!==u&&!Gu(u)&&(r?u<=n:u<n)?e=o+1:i=o}return i}return He(t,n,Ka,r)}function He(t,n,r,e){var i=0,o=null==t?0:t.length;if(0===o)return 0;for(var u=(n=r(n))!=n,a=null===n,s=Gu(n),c=void 0===n;i<o;){var f=tr((i+o)/2),l=r(t[f]),h=void 0!==l,v=null===l,p=l==l,d=Gu(l);if(u)var g=e||p;else g=c?p&&(e||h):a?p&&h&&(e||!v):s?p&&h&&!v&&(e||!d):!v&&!d&&(e?l<=n:l<n);g?i=f+1:o=f}return ar(o,4294967294)}function $e(t,n){for(var r=-1,e=t.length,i=0,o=[];++r<e;){var u=t[r],a=n?n(u):u;if(!r||!ku(a,s)){var s=a;o[i++]=0===u?0:u}}return o}function qe(t){return"number"==typeof t?t:Gu(t)?NaN:+t}function Ge(t){if("string"==typeof t)return t;if(Ou(t))return pn(t,Ge)+"";if(Gu(t))return Er?Er.call(t):"";var n=t+"";return"0"==n&&1/t==-1/0?"-0":n}function Je(t,n,r){var e=-1,i=hn,o=t.length,u=!0,a=[],s=a;if(r)u=!1,i=vn;else if(o>=200){var c=n?null:Ti(t);if(c)return Zn(c);u=!1,i=On,s=new Pr}else s=n?[]:a;t:for(;++e<o;){var f=t[e],l=n?n(f):f;if(f=r||0!==f?f:0,u&&l==l){for(var h=s.length;h--;)if(s[h]===l)continue t;n&&s.push(l),a.push(f)}else i(s,l,r)||(s!==a&&s.push(l),a.push(f))}return a}function Qe(t,n){return null==(t=go(t,n=ai(n,t)))||delete t[jo(Yo(n))]}function ti(t,n,r,e){return Ue(t,n,r(le(t,n)),e)}function ni(t,n,r,e){for(var i=t.length,o=e?i:-1;(e?o--:++o<i)&&n(t[o],o,t););return r?Xe(t,e?0:o,e?o+1:i):Xe(t,e?o+1:0,e?i:o)}function ri(t,n){var r=t;return r instanceof Cr&&(r=r.value()),gn(n,(function(t,n){return n.func.apply(n.thisArg,dn([t],n.args))}),r)}function ei(t,n,r){var i=t.length;if(i<2)return i?Je(t[0]):[];for(var o=-1,u=e(i);++o<i;)for(var a=t[o],s=-1;++s<i;)s!=o&&(u[o]=Qr(u[o]||a,t[s],n,r));return Je(oe(u,1),n,r)}function ii(t,n,r){for(var e=-1,i=t.length,o=n.length,u={};++e<i;){var a=e<o?n[e]:void 0;r(u,t[e],a)}return u}function oi(t){return Pu(t)?t:[]}function ui(t){return"function"==typeof t?t:Ka}function ai(t,n){return Ou(t)?t:so(t,n)?[t]:Ao(aa(t))}var si=Ie;function ci(t,n,r){var e=t.length;return r=void 0===r?e:r,!n&&r>=e?t:Xe(t,n,r)}var fi=qn||function(t){return Vt.clearTimeout(t)};function li(t,n){if(n)return t.slice();var r=t.length,e=Dt?Dt(r):new t.constructor(r);return t.copy(e),e}function hi(t){var n=new t.constructor(t.byteLength);return new Pt(n).set(new Pt(t)),n}function vi(t,n){var r=n?hi(t.buffer):t.buffer;return new t.constructor(r,t.byteOffset,t.length)}function pi(t,n){if(t!==n){var r=void 0!==t,e=null===t,i=t==t,o=Gu(t),u=void 0!==n,a=null===n,s=n==n,c=Gu(n);if(!a&&!c&&!o&&t>n||o&&u&&s&&!a&&!c||e&&u&&s||!r&&s||!i)return 1;if(!e&&!o&&!c&&t<n||c&&r&&i&&!e&&!o||a&&r&&i||!u&&i||!s)return-1}return 0}function di(t,n,r,i){for(var o=-1,u=t.length,a=r.length,s=-1,c=n.length,f=ur(u-a,0),l=e(c+f),h=!i;++s<c;)l[s]=n[s];for(;++o<a;)(h||o<u)&&(l[r[o]]=t[o]);for(;f--;)l[s++]=t[o++];return l}function gi(t,n,r,i){for(var o=-1,u=t.length,a=-1,s=r.length,c=-1,f=n.length,l=ur(u-s,0),h=e(l+f),v=!i;++o<l;)h[o]=t[o];for(var p=o;++c<f;)h[p+c]=n[c];for(;++a<s;)(v||o<u)&&(h[p+r[a]]=t[o++]);return h}function yi(t,n){var r=-1,i=t.length;for(n||(n=e(i));++r<i;)n[r]=t[r];return n}function _i(t,n,r,e){var i=!r;r||(r={});for(var o=-1,u=n.length;++o<u;){var a=n[o],s=e?e(r[a],t[a],a,r,t):void 0;void 0===s&&(s=t[a]),i?Vr(r,a,s):Wr(r,a,s)}return r}function mi(t,n){return function(r,e){var i=Ou(r)?an:Xr,o=n?n():{};return i(r,t,qi(e,2),o)}}function xi(t){return Ie((function(n,r){var e=-1,i=r.length,o=i>1?r[i-1]:void 0,u=i>2?r[2]:void 0;for(o=t.length>3&&"function"==typeof o?(i--,o):void 0,u&&ao(r[0],r[1],u)&&(o=i<3?void 0:o,i=1),n=dt(n);++e<i;){var a=r[e];a&&t(n,a,e,o)}return n}))}function bi(t,n){return function(r,e){if(null==r)return r;if(!zu(r))return t(r,e);for(var i=r.length,o=n?i:-1,u=dt(r);(n?o--:++o<i)&&!1!==e(u[o],o,u););return r}}function wi(t){return function(n,r,e){for(var i=-1,o=dt(n),u=e(n),a=u.length;a--;){var s=u[t?a:++i];if(!1===r(o[s],s,o))break}return n}}function Si(t){return function(n){var r=Nn(n=aa(n))?Vn(n):void 0,e=r?r[0]:n.charAt(0),i=r?ci(r,1).join(""):n.slice(1);return e[t]()+i}}function Li(t){return function(n){return gn(Na(Ca(n).replace(Ct,"")),t,"")}}function Ai(t){return function(){var n=arguments;switch(n.length){case 0:return new t;case 1:return new t(n[0]);case 2:return new t(n[0],n[1]);case 3:return new t(n[0],n[1],n[2]);case 4:return new t(n[0],n[1],n[2],n[3]);case 5:return new t(n[0],n[1],n[2],n[3],n[4]);case 6:return new t(n[0],n[1],n[2],n[3],n[4],n[5]);case 7:return new t(n[0],n[1],n[2],n[3],n[4],n[5],n[6])}var r=kr(t.prototype),e=t.apply(r,n);return Wu(e)?e:r}}function ji(t){return function(n,r,e){var i=dt(n);if(!zu(n)){var o=qi(r,3);n=xa(n),r=function(t){return o(i[t],t,i)}}var u=t(n,r,e);return u>-1?i[o?n[u]:u]:void 0}}function Ei(t){return Zi((function(n){var r=n.length,e=r,i=Br.prototype.thru;for(t&&n.reverse();e--;){var u=n[e];if("function"!=typeof u)throw new _t(o);if(i&&!a&&"wrapper"==Hi(u))var a=new Br([],!0)}for(e=a?e:r;++e<r;){var s=Hi(u=n[e]),c="wrapper"==s?Vi(u):void 0;a=c&&co(c[0])&&424==c[1]&&!c[4].length&&1==c[9]?a[Hi(c[0])].apply(a,c[3]):1==u.length&&co(u)?a[s]():a.thru(u)}return function(){var t=arguments,e=t[0];if(a&&1==t.length&&Ou(e))return a.plant(e).value();for(var i=0,o=r?n[i].apply(this,t):e;++i<r;)o=n[i].call(this,o);return o}}))}function Mi(t,n,r,i,o,u,a,s,c,f){var l=128&n,h=1&n,v=2&n,p=24&n,d=512&n,g=v?void 0:Ai(t);return function y(){for(var _=arguments.length,m=e(_),x=_;x--;)m[x]=arguments[x];if(p)var b=$i(y),w=Pn(m,b);if(i&&(m=di(m,i,o,p)),u&&(m=gi(m,u,a,p)),_-=w,p&&_<f){var S=Wn(m,b);return zi(t,n,Mi,y.placeholder,r,m,S,s,c,f-_)}var L=h?r:this,A=v?L[t]:t;return _=m.length,s?m=yo(m,s):d&&_>1&&m.reverse(),l&&c<_&&(m.length=c),this&&this!==Vt&&this instanceof y&&(A=g||Ai(A)),A.apply(L,m)}}function ki(t,n){return function(r,e){return function(t,n,r,e){return se(t,(function(t,i,o){n(e,r(t),i,o)})),e}(r,t,n(e),{})}}function Fi(t,n){return function(r,e){var i;if(void 0===r&&void 0===e)return n;if(void 0!==r&&(i=r),void 0!==e){if(void 0===i)return e;"string"==typeof r||"string"==typeof e?(r=Ge(r),e=Ge(e)):(r=qe(r),e=qe(e)),i=t(r,e)}return i}}function Bi(t){return Zi((function(n){return n=pn(n,Bn(qi())),Ie((function(r){var e=this;return t(n,(function(t){return un(t,e,r)}))}))}))}function Ci(t,n){var r=(n=void 0===n?" ":Ge(n)).length;if(r<2)return r?Te(n,t):n;var e=Te(n,Qn(t/Kn(n)));return Nn(n)?ci(Vn(e),0,t).join(""):e.slice(0,t)}function Oi(t){return function(n,r,i){return i&&"number"!=typeof i&&ao(n,r,i)&&(r=i=void 0),n=ra(n),void 0===r?(r=n,n=0):r=ra(r),function(t,n,r,i){for(var o=-1,u=ur(Qn((n-t)/(r||1)),0),a=e(u);u--;)a[i?u:++o]=t,t+=r;return a}(n,r,i=void 0===i?n<r?1:-1:ra(i),t)}}function Ri(t){return function(n,r){return"string"==typeof n&&"string"==typeof r||(n=oa(n),r=oa(r)),t(n,r)}}function zi(t,n,r,e,i,o,u,a,s,c){var f=8&n;n|=f?32:64,4&(n&=~(f?64:32))||(n&=-4);var l=[t,n,i,f?o:void 0,f?u:void 0,f?void 0:o,f?void 0:u,a,s,c],h=r.apply(void 0,l);return co(t)&&mo(h,l),h.placeholder=e,wo(h,t,n)}function Pi(t){var n=pt[t];return function(t,r){if(t=oa(t),(r=null==r?0:ar(ea(r),292))&&er(t)){var e=(aa(t)+"e").split("e");return+((e=(aa(n(e[0]+"e"+(+e[1]+r)))+"e").split("e"))[0]+"e"+(+e[1]-r))}return n(t)}}var Ti=dr&&1/Zn(new dr([,-0]))[1]==1/0?function(t){return new dr(t)}:Ga;function Ii(t){return function(n){var r=ro(n);return r==d?Un(n):r==m?Xn(n):function(t,n){return pn(n,(function(n){return[n,t[n]]}))}(n,t(n))}}function Yi(t,n,r,i,a,s,c,f){var l=2&n;if(!l&&"function"!=typeof t)throw new _t(o);var h=i?i.length:0;if(h||(n&=-97,i=a=void 0),c=void 0===c?c:ur(ea(c),0),f=void 0===f?f:ea(f),h-=a?a.length:0,64&n){var v=i,p=a;i=a=void 0}var d=l?void 0:Vi(t),g=[t,n,r,i,a,v,p,s,c,f];if(d&&function(t,n){var r=t[1],e=n[1],i=r|e,o=i<131,a=128==e&&8==r||128==e&&256==r&&t[7].length<=n[8]||384==e&&n[7].length<=n[8]&&8==r;if(!o&&!a)return t;1&e&&(t[2]=n[2],i|=1&r?0:4);var s=n[3];if(s){var c=t[3];t[3]=c?di(c,s,n[4]):s,t[4]=c?Wn(t[3],u):n[4]}(s=n[5])&&(c=t[5],t[5]=c?gi(c,s,n[6]):s,t[6]=c?Wn(t[5],u):n[6]);(s=n[7])&&(t[7]=s);128&e&&(t[8]=null==t[8]?n[8]:ar(t[8],n[8]));null==t[9]&&(t[9]=n[9]);t[0]=n[0],t[1]=i}(g,d),t=g[0],n=g[1],r=g[2],i=g[3],a=g[4],!(f=g[9]=void 0===g[9]?l?0:t.length:ur(g[9]-h,0))&&24&n&&(n&=-25),n&&1!=n)y=8==n||16==n?function(t,n,r){var i=Ai(t);return function o(){for(var u=arguments.length,a=e(u),s=u,c=$i(o);s--;)a[s]=arguments[s];var f=u<3&&a[0]!==c&&a[u-1]!==c?[]:Wn(a,c);if((u-=f.length)<r)return zi(t,n,Mi,o.placeholder,void 0,a,f,void 0,void 0,r-u);var l=this&&this!==Vt&&this instanceof o?i:t;return un(l,this,a)}}(t,n,f):32!=n&&33!=n||a.length?Mi.apply(void 0,g):function(t,n,r,i){var o=1&n,u=Ai(t);return function n(){for(var a=-1,s=arguments.length,c=-1,f=i.length,l=e(f+s),h=this&&this!==Vt&&this instanceof n?u:t;++c<f;)l[c]=i[c];for(;s--;)l[c++]=arguments[++a];return un(h,o?r:this,l)}}(t,n,r,i);else var y=function(t,n,r){var e=1&n,i=Ai(t);return function n(){var o=this&&this!==Vt&&this instanceof n?i:t;return o.apply(e?r:this,arguments)}}(t,n,r);return wo((d?De:mo)(y,g),t,n)}function Ni(t,n,r,e){return void 0===t||ku(t,bt[r])&&!Lt.call(e,r)?n:t}function Ui(t,n,r,e,i,o){return Wu(t)&&Wu(n)&&(o.set(n,t),Fe(t,n,void 0,Ui,o),o.delete(n)),t}function Di(t){return Vu(t)?void 0:t}function Wi(t,n,r,e,i,o){var u=1&r,a=t.length,s=n.length;if(a!=s&&!(u&&s>a))return!1;var c=o.get(t),f=o.get(n);if(c&&f)return c==n&&f==t;var l=-1,h=!0,v=2&r?new Pr:void 0;for(o.set(t,n),o.set(n,t);++l<a;){var p=t[l],d=n[l];if(e)var g=u?e(d,p,l,n,t,o):e(p,d,l,t,n,o);if(void 0!==g){if(g)continue;h=!1;break}if(v){if(!_n(n,(function(t,n){if(!On(v,n)&&(p===t||i(p,t,r,e,o)))return v.push(n)}))){h=!1;break}}else if(p!==d&&!i(p,d,r,e,o)){h=!1;break}}return o.delete(t),o.delete(n),h}function Zi(t){return bo(po(t,void 0,Ro),t+"")}function Xi(t){return he(t,xa,to)}function Ki(t){return he(t,ba,no)}var Vi=_r?function(t){return _r.get(t)}:Ga;function Hi(t){for(var n=t.name+"",r=mr[n],e=Lt.call(mr,n)?r.length:0;e--;){var i=r[e],o=i.func;if(null==o||o==t)return i.name}return n}function $i(t){return(Lt.call(Mr,"placeholder")?Mr:t).placeholder}function qi(){var t=Mr.iteratee||Va;return t=t===Va?Se:t,arguments.length?t(arguments[0],arguments[1]):t}function Gi(t,n){var r,e,i=t.__data__;return("string"==(e=typeof(r=n))||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==r:null===r)?i["string"==typeof n?"string":"hash"]:i.map}function Ji(t){for(var n=xa(t),r=n.length;r--;){var e=n[r],i=t[e];n[r]=[e,i,ho(i)]}return n}function Qi(t,n){var r=function(t,n){return null==t?void 0:t[n]}(t,n);return we(r)?r:void 0}var to=nr?function(t){return null==t?[]:(t=dt(t),ln(nr(t),(function(n){return Ht.call(t,n)})))}:is,no=nr?function(t){for(var n=[];t;)dn(n,to(t)),t=Xt(t);return n}:is,ro=ve;function eo(t,n,r){for(var e=-1,i=(n=ai(n,t)).length,o=!1;++e<i;){var u=jo(n[e]);if(!(o=null!=t&&r(t,u)))break;t=t[u]}return o||++e!=i?o:!!(i=null==t?0:t.length)&&Du(i)&&uo(u,i)&&(Ou(t)||Cu(t))}function io(t){return"function"!=typeof t.constructor||lo(t)?{}:kr(Xt(t))}function oo(t){return Ou(t)||Cu(t)||!!(Gt&&t&&t[Gt])}function uo(t,n){var r=typeof t;return!!(n=null==n?9007199254740991:n)&&("number"==r||"symbol"!=r&&st.test(t))&&t>-1&&t%1==0&&t<n}function ao(t,n,r){if(!Wu(r))return!1;var e=typeof n;return!!("number"==e?zu(r)&&uo(n,r.length):"string"==e&&n in r)&&ku(r[n],t)}function so(t,n){if(Ou(t))return!1;var r=typeof t;return!("number"!=r&&"symbol"!=r&&"boolean"!=r&&null!=t&&!Gu(t))||(Z.test(t)||!W.test(t)||null!=n&&t in dt(n))}function co(t){var n=Hi(t),r=Mr[n];if("function"!=typeof r||!(n in Cr.prototype))return!1;if(t===r)return!0;var e=Vi(r);return!!e&&t===e[0]}(hr&&ro(new hr(new ArrayBuffer(1)))!=L||vr&&ro(new vr)!=d||pr&&"[object Promise]"!=ro(pr.resolve())||dr&&ro(new dr)!=m||gr&&ro(new gr)!=w)&&(ro=function(t){var n=ve(t),r=n==y?t.constructor:void 0,e=r?Eo(r):"";if(e)switch(e){case xr:return L;case br:return d;case wr:return"[object Promise]";case Sr:return m;case Lr:return w}return n});var fo=wt?Nu:os;function lo(t){var n=t&&t.constructor;return t===("function"==typeof n&&n.prototype||bt)}function ho(t){return t==t&&!Wu(t)}function vo(t,n){return function(r){return null!=r&&(r[t]===n&&(void 0!==n||t in dt(r)))}}function po(t,n,r){return n=ur(void 0===n?t.length-1:n,0),function(){for(var i=arguments,o=-1,u=ur(i.length-n,0),a=e(u);++o<u;)a[o]=i[n+o];o=-1;for(var s=e(n+1);++o<n;)s[o]=i[o];return s[n]=r(a),un(t,this,s)}}function go(t,n){return n.length<2?t:le(t,Xe(n,0,-1))}function yo(t,n){for(var r=t.length,e=ar(n.length,r),i=yi(t);e--;){var o=n[e];t[e]=uo(o,r)?i[o]:void 0}return t}function _o(t,n){if(("constructor"!==n||"function"!=typeof t[n])&&"__proto__"!=n)return t[n]}var mo=So(De),xo=Jn||function(t,n){return Vt.setTimeout(t,n)},bo=So(We);function wo(t,n,r){var e=n+"";return bo(t,function(t,n){var r=n.length;if(!r)return t;var e=r-1;return n[e]=(r>1?"& ":"")+n[e],n=n.join(r>2?", ":" "),t.replace(G,"{\n/* [wrapped with "+n+"] */\n")}(e,function(t,n){return sn(a,(function(r){var e="_."+r[0];n&r[1]&&!hn(t,e)&&t.push(e)})),t.sort()}(function(t){var n=t.match(J);return n?n[1].split(Q):[]}(e),r)))}function So(t){var n=0,r=0;return function(){var e=sr(),i=16-(e-r);if(r=e,i>0){if(++n>=800)return arguments[0]}else n=0;return t.apply(void 0,arguments)}}function Lo(t,n){var r=-1,e=t.length,i=e-1;for(n=void 0===n?e:n;++r<n;){var o=Pe(r,i),u=t[o];t[o]=t[r],t[r]=u}return t.length=n,t}var Ao=function(t){var n=Su(t,(function(t){return 500===r.size&&r.clear(),t})),r=n.cache;return n}((function(t){var n=[];return 46===t.charCodeAt(0)&&n.push(""),t.replace(X,(function(t,r,e,i){n.push(e?i.replace(nt,"$1"):r||t)})),n}));function jo(t){if("string"==typeof t||Gu(t))return t;var n=t+"";return"0"==n&&1/t==-1/0?"-0":n}function Eo(t){if(null!=t){try{return St.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function Mo(t){if(t instanceof Cr)return t.clone();var n=new Br(t.__wrapped__,t.__chain__);return n.__actions__=yi(t.__actions__),n.__index__=t.__index__,n.__values__=t.__values__,n}var ko=Ie((function(t,n){return Pu(t)?Qr(t,oe(n,1,Pu,!0)):[]})),Fo=Ie((function(t,n){var r=Yo(n);return Pu(r)&&(r=void 0),Pu(t)?Qr(t,oe(n,1,Pu,!0),qi(r,2)):[]})),Bo=Ie((function(t,n){var r=Yo(n);return Pu(r)&&(r=void 0),Pu(t)?Qr(t,oe(n,1,Pu,!0),void 0,r):[]}));function Co(t,n,r){var e=null==t?0:t.length;if(!e)return-1;var i=null==r?0:ea(r);return i<0&&(i=ur(e+i,0)),bn(t,qi(n,3),i)}function Oo(t,n,r){var e=null==t?0:t.length;if(!e)return-1;var i=e-1;return void 0!==r&&(i=ea(r),i=r<0?ur(e+i,0):ar(i,e-1)),bn(t,qi(n,3),i,!0)}function Ro(t){return(null==t?0:t.length)?oe(t,1):[]}function zo(t){return t&&t.length?t[0]:void 0}var Po=Ie((function(t){var n=pn(t,oi);return n.length&&n[0]===t[0]?ye(n):[]})),To=Ie((function(t){var n=Yo(t),r=pn(t,oi);return n===Yo(r)?n=void 0:r.pop(),r.length&&r[0]===t[0]?ye(r,qi(n,2)):[]})),Io=Ie((function(t){var n=Yo(t),r=pn(t,oi);return(n="function"==typeof n?n:void 0)&&r.pop(),r.length&&r[0]===t[0]?ye(r,void 0,n):[]}));function Yo(t){var n=null==t?0:t.length;return n?t[n-1]:void 0}var No=Ie(Uo);function Uo(t,n){return t&&t.length&&n&&n.length?Re(t,n):t}var Do=Zi((function(t,n){var r=null==t?0:t.length,e=Hr(t,n);return ze(t,pn(n,(function(t){return uo(t,r)?+t:t})).sort(pi)),e}));function Wo(t){return null==t?t:lr.call(t)}var Zo=Ie((function(t){return Je(oe(t,1,Pu,!0))})),Xo=Ie((function(t){var n=Yo(t);return Pu(n)&&(n=void 0),Je(oe(t,1,Pu,!0),qi(n,2))})),Ko=Ie((function(t){var n=Yo(t);return n="function"==typeof n?n:void 0,Je(oe(t,1,Pu,!0),void 0,n)}));function Vo(t){if(!t||!t.length)return[];var n=0;return t=ln(t,(function(t){if(Pu(t))return n=ur(t.length,n),!0})),Fn(n,(function(n){return pn(t,jn(n))}))}function Ho(t,n){if(!t||!t.length)return[];var r=Vo(t);return null==n?r:pn(r,(function(t){return un(n,void 0,t)}))}var $o=Ie((function(t,n){return Pu(t)?Qr(t,n):[]})),qo=Ie((function(t){return ei(ln(t,Pu))})),Go=Ie((function(t){var n=Yo(t);return Pu(n)&&(n=void 0),ei(ln(t,Pu),qi(n,2))})),Jo=Ie((function(t){var n=Yo(t);return n="function"==typeof n?n:void 0,ei(ln(t,Pu),void 0,n)})),Qo=Ie(Vo);var tu=Ie((function(t){var n=t.length,r=n>1?t[n-1]:void 0;return r="function"==typeof r?(t.pop(),r):void 0,Ho(t,r)}));function nu(t){var n=Mr(t);return n.__chain__=!0,n}function ru(t,n){return n(t)}var eu=Zi((function(t){var n=t.length,r=n?t[0]:0,e=this.__wrapped__,i=function(n){return Hr(n,t)};return!(n>1||this.__actions__.length)&&e instanceof Cr&&uo(r)?((e=e.slice(r,+r+(n?1:0))).__actions__.push({func:ru,args:[i],thisArg:void 0}),new Br(e,this.__chain__).thru((function(t){return n&&!t.length&&t.push(void 0),t}))):this.thru(i)}));var iu=mi((function(t,n,r){Lt.call(t,r)?++t[r]:Vr(t,r,1)}));var ou=ji(Co),uu=ji(Oo);function au(t,n){return(Ou(t)?sn:te)(t,qi(n,3))}function su(t,n){return(Ou(t)?cn:ne)(t,qi(n,3))}var cu=mi((function(t,n,r){Lt.call(t,r)?t[r].push(n):Vr(t,r,[n])}));var fu=Ie((function(t,n,r){var i=-1,o="function"==typeof n,u=zu(t)?e(t.length):[];return te(t,(function(t){u[++i]=o?un(n,t,r):_e(t,n,r)})),u})),lu=mi((function(t,n,r){Vr(t,r,n)}));function hu(t,n){return(Ou(t)?pn:Ee)(t,qi(n,3))}var vu=mi((function(t,n,r){t[r?0:1].push(n)}),(function(){return[[],[]]}));var pu=Ie((function(t,n){if(null==t)return[];var r=n.length;return r>1&&ao(t,n[0],n[1])?n=[]:r>2&&ao(n[0],n[1],n[2])&&(n=[n[0]]),Ce(t,oe(n,1),[])})),du=Gn||function(){return Vt.Date.now()};function gu(t,n,r){return n=r?void 0:n,Yi(t,128,void 0,void 0,void 0,void 0,n=t&&null==n?t.length:n)}function yu(t,n){var r;if("function"!=typeof n)throw new _t(o);return t=ea(t),function(){return--t>0&&(r=n.apply(this,arguments)),t<=1&&(n=void 0),r}}var _u=Ie((function(t,n,r){var e=1;if(r.length){var i=Wn(r,$i(_u));e|=32}return Yi(t,e,n,r,i)})),mu=Ie((function(t,n,r){var e=3;if(r.length){var i=Wn(r,$i(mu));e|=32}return Yi(n,e,t,r,i)}));function xu(t,n,r){var e,i,u,a,s,c,f=0,l=!1,h=!1,v=!0;if("function"!=typeof t)throw new _t(o);function p(n){var r=e,o=i;return e=i=void 0,f=n,a=t.apply(o,r)}function d(t){return f=t,s=xo(y,n),l?p(t):a}function g(t){var r=t-c;return void 0===c||r>=n||r<0||h&&t-f>=u}function y(){var t=du();if(g(t))return _(t);s=xo(y,function(t){var r=n-(t-c);return h?ar(r,u-(t-f)):r}(t))}function _(t){return s=void 0,v&&e?p(t):(e=i=void 0,a)}function m(){var t=du(),r=g(t);if(e=arguments,i=this,c=t,r){if(void 0===s)return d(c);if(h)return fi(s),s=xo(y,n),p(c)}return void 0===s&&(s=xo(y,n)),a}return n=oa(n)||0,Wu(r)&&(l=!!r.leading,u=(h="maxWait"in r)?ur(oa(r.maxWait)||0,n):u,v="trailing"in r?!!r.trailing:v),m.cancel=function(){void 0!==s&&fi(s),f=0,e=c=i=s=void 0},m.flush=function(){return void 0===s?a:_(du())},m}var bu=Ie((function(t,n){return Jr(t,1,n)})),wu=Ie((function(t,n,r){return Jr(t,oa(n)||0,r)}));function Su(t,n){if("function"!=typeof t||null!=n&&"function"!=typeof n)throw new _t(o);var r=function(){var e=arguments,i=n?n.apply(this,e):e[0],o=r.cache;if(o.has(i))return o.get(i);var u=t.apply(this,e);return r.cache=o.set(i,u)||o,u};return r.cache=new(Su.Cache||zr),r}function Lu(t){if("function"!=typeof t)throw new _t(o);return function(){var n=arguments;switch(n.length){case 0:return!t.call(this);case 1:return!t.call(this,n[0]);case 2:return!t.call(this,n[0],n[1]);case 3:return!t.call(this,n[0],n[1],n[2])}return!t.apply(this,n)}}Su.Cache=zr;var Au=si((function(t,n){var r=(n=1==n.length&&Ou(n[0])?pn(n[0],Bn(qi())):pn(oe(n,1),Bn(qi()))).length;return Ie((function(e){for(var i=-1,o=ar(e.length,r);++i<o;)e[i]=n[i].call(this,e[i]);return un(t,this,e)}))})),ju=Ie((function(t,n){return Yi(t,32,void 0,n,Wn(n,$i(ju)))})),Eu=Ie((function(t,n){return Yi(t,64,void 0,n,Wn(n,$i(Eu)))})),Mu=Zi((function(t,n){return Yi(t,256,void 0,void 0,void 0,n)}));function ku(t,n){return t===n||t!=t&&n!=n}var Fu=Ri(pe),Bu=Ri((function(t,n){return t>=n})),Cu=me(function(){return arguments}())?me:function(t){return Zu(t)&&Lt.call(t,"callee")&&!Ht.call(t,"callee")},Ou=e.isArray,Ru=Qt?Bn(Qt):function(t){return Zu(t)&&ve(t)==S};function zu(t){return null!=t&&Du(t.length)&&!Nu(t)}function Pu(t){return Zu(t)&&zu(t)}var Tu=rr||os,Iu=tn?Bn(tn):function(t){return Zu(t)&&ve(t)==l};function Yu(t){if(!Zu(t))return!1;var n=ve(t);return n==h||"[object DOMException]"==n||"string"==typeof t.message&&"string"==typeof t.name&&!Vu(t)}function Nu(t){if(!Wu(t))return!1;var n=ve(t);return n==v||n==p||"[object AsyncFunction]"==n||"[object Proxy]"==n}function Uu(t){return"number"==typeof t&&t==ea(t)}function Du(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=9007199254740991}function Wu(t){var n=typeof t;return null!=t&&("object"==n||"function"==n)}function Zu(t){return null!=t&&"object"==typeof t}var Xu=nn?Bn(nn):function(t){return Zu(t)&&ro(t)==d};function Ku(t){return"number"==typeof t||Zu(t)&&ve(t)==g}function Vu(t){if(!Zu(t)||ve(t)!=y)return!1;var n=Xt(t);if(null===n)return!0;var r=Lt.call(n,"constructor")&&n.constructor;return"function"==typeof r&&r instanceof r&&St.call(r)==Mt}var Hu=rn?Bn(rn):function(t){return Zu(t)&&ve(t)==_};var $u=en?Bn(en):function(t){return Zu(t)&&ro(t)==m};function qu(t){return"string"==typeof t||!Ou(t)&&Zu(t)&&ve(t)==x}function Gu(t){return"symbol"==typeof t||Zu(t)&&ve(t)==b}var Ju=on?Bn(on):function(t){return Zu(t)&&Du(t.length)&&!!Nt[ve(t)]};var Qu=Ri(je),ta=Ri((function(t,n){return t<=n}));function na(t){if(!t)return[];if(zu(t))return qu(t)?Vn(t):yi(t);if(Jt&&t[Jt])return function(t){for(var n,r=[];!(n=t.next()).done;)r.push(n.value);return r}(t[Jt]());var n=ro(t);return(n==d?Un:n==m?Zn:ka)(t)}function ra(t){return t?(t=oa(t))===1/0||t===-1/0?17976931348623157e292*(t<0?-1:1):t==t?t:0:0===t?t:0}function ea(t){var n=ra(t),r=n%1;return n==n?r?n-r:n:0}function ia(t){return t?$r(ea(t),0,4294967295):0}function oa(t){if("number"==typeof t)return t;if(Gu(t))return NaN;if(Wu(t)){var n="function"==typeof t.valueOf?t.valueOf():t;t=Wu(n)?n+"":n}if("string"!=typeof t)return 0===t?t:+t;t=t.replace(H,"");var r=ot.test(t);return r||at.test(t)?Zt(t.slice(2),r?2:8):it.test(t)?NaN:+t}function ua(t){return _i(t,ba(t))}function aa(t){return null==t?"":Ge(t)}var sa=xi((function(t,n){if(lo(n)||zu(n))_i(n,xa(n),t);else for(var r in n)Lt.call(n,r)&&Wr(t,r,n[r])})),ca=xi((function(t,n){_i(n,ba(n),t)})),fa=xi((function(t,n,r,e){_i(n,ba(n),t,e)})),la=xi((function(t,n,r,e){_i(n,xa(n),t,e)})),ha=Zi(Hr);var va=Ie((function(t,n){t=dt(t);var r=-1,e=n.length,i=e>2?n[2]:void 0;for(i&&ao(n[0],n[1],i)&&(e=1);++r<e;)for(var o=n[r],u=ba(o),a=-1,s=u.length;++a<s;){var c=u[a],f=t[c];(void 0===f||ku(f,bt[c])&&!Lt.call(t,c))&&(t[c]=o[c])}return t})),pa=Ie((function(t){return t.push(void 0,Ui),un(Sa,void 0,t)}));function da(t,n,r){var e=null==t?void 0:le(t,n);return void 0===e?r:e}function ga(t,n){return null!=t&&eo(t,n,ge)}var ya=ki((function(t,n,r){null!=n&&"function"!=typeof n.toString&&(n=Et.call(n)),t[n]=r}),Wa(Ka)),_a=ki((function(t,n,r){null!=n&&"function"!=typeof n.toString&&(n=Et.call(n)),Lt.call(t,n)?t[n].push(r):t[n]=[r]}),qi),ma=Ie(_e);function xa(t){return zu(t)?Ir(t):Le(t)}function ba(t){return zu(t)?Ir(t,!0):Ae(t)}var wa=xi((function(t,n,r){Fe(t,n,r)})),Sa=xi((function(t,n,r,e){Fe(t,n,r,e)})),La=Zi((function(t,n){var r={};if(null==t)return r;var e=!1;n=pn(n,(function(n){return n=ai(n,t),e||(e=n.length>1),n})),_i(t,Ki(t),r),e&&(r=qr(r,7,Di));for(var i=n.length;i--;)Qe(r,n[i]);return r}));var Aa=Zi((function(t,n){return null==t?{}:function(t,n){return Oe(t,n,(function(n,r){return ga(t,r)}))}(t,n)}));function ja(t,n){if(null==t)return{};var r=pn(Ki(t),(function(t){return[t]}));return n=qi(n),Oe(t,r,(function(t,r){return n(t,r[0])}))}var Ea=Ii(xa),Ma=Ii(ba);function ka(t){return null==t?[]:Cn(t,xa(t))}var Fa=Li((function(t,n,r){return n=n.toLowerCase(),t+(r?Ba(n):n)}));function Ba(t){return Ya(aa(t).toLowerCase())}function Ca(t){return(t=aa(t))&&t.replace(ct,Tn).replace(Ot,"")}var Oa=Li((function(t,n,r){return t+(r?"-":"")+n.toLowerCase()})),Ra=Li((function(t,n,r){return t+(r?" ":"")+n.toLowerCase()})),za=Si("toLowerCase");var Pa=Li((function(t,n,r){return t+(r?"_":"")+n.toLowerCase()}));var Ta=Li((function(t,n,r){return t+(r?" ":"")+Ya(n)}));var Ia=Li((function(t,n,r){return t+(r?" ":"")+n.toUpperCase()})),Ya=Si("toUpperCase");function Na(t,n,r){return t=aa(t),void 0===(n=r?void 0:n)?function(t){return Tt.test(t)}(t)?function(t){return t.match(zt)||[]}(t):function(t){return t.match(tt)||[]}(t):t.match(n)||[]}var Ua=Ie((function(t,n){try{return un(t,void 0,n)}catch(t){return Yu(t)?t:new ht(t)}})),Da=Zi((function(t,n){return sn(n,(function(n){n=jo(n),Vr(t,n,_u(t[n],t))})),t}));function Wa(t){return function(){return t}}var Za=Ei(),Xa=Ei(!0);function Ka(t){return t}function Va(t){return Se("function"==typeof t?t:qr(t,1))}var Ha=Ie((function(t,n){return function(r){return _e(r,t,n)}})),$a=Ie((function(t,n){return function(r){return _e(t,r,n)}}));function qa(t,n,r){var e=xa(n),i=fe(n,e);null!=r||Wu(n)&&(i.length||!e.length)||(r=n,n=t,t=this,i=fe(n,xa(n)));var o=!(Wu(r)&&"chain"in r&&!r.chain),u=Nu(t);return sn(i,(function(r){var e=n[r];t[r]=e,u&&(t.prototype[r]=function(){var n=this.__chain__;if(o||n){var r=t(this.__wrapped__),i=r.__actions__=yi(this.__actions__);return i.push({func:e,args:arguments,thisArg:t}),r.__chain__=n,r}return e.apply(t,dn([this.value()],arguments))})})),t}function Ga(){}var Ja=Bi(pn),Qa=Bi(fn),ts=Bi(_n);function ns(t){return so(t)?jn(jo(t)):function(t){return function(n){return le(n,t)}}(t)}var rs=Oi(),es=Oi(!0);function is(){return[]}function os(){return!1}var us=Fi((function(t,n){return t+n}),0),as=Pi("ceil"),ss=Fi((function(t,n){return t/n}),1),cs=Pi("floor");var fs,ls=Fi((function(t,n){return t*n}),1),hs=Pi("round"),vs=Fi((function(t,n){return t-n}),0);return Mr.after=function(t,n){if("function"!=typeof n)throw new _t(o);return t=ea(t),function(){if(--t<1)return n.apply(this,arguments)}},Mr.ary=gu,Mr.assign=sa,Mr.assignIn=ca,Mr.assignInWith=fa,Mr.assignWith=la,Mr.at=ha,Mr.before=yu,Mr.bind=_u,Mr.bindAll=Da,Mr.bindKey=mu,Mr.castArray=function(){if(!arguments.length)return[];var t=arguments[0];return Ou(t)?t:[t]},Mr.chain=nu,Mr.chunk=function(t,n,r){n=(r?ao(t,n,r):void 0===n)?1:ur(ea(n),0);var i=null==t?0:t.length;if(!i||n<1)return[];for(var o=0,u=0,a=e(Qn(i/n));o<i;)a[u++]=Xe(t,o,o+=n);return a},Mr.compact=function(t){for(var n=-1,r=null==t?0:t.length,e=0,i=[];++n<r;){var o=t[n];o&&(i[e++]=o)}return i},Mr.concat=function(){var t=arguments.length;if(!t)return[];for(var n=e(t-1),r=arguments[0],i=t;i--;)n[i-1]=arguments[i];return dn(Ou(r)?yi(r):[r],oe(n,1))},Mr.cond=function(t){var n=null==t?0:t.length,r=qi();return t=n?pn(t,(function(t){if("function"!=typeof t[1])throw new _t(o);return[r(t[0]),t[1]]})):[],Ie((function(r){for(var e=-1;++e<n;){var i=t[e];if(un(i[0],this,r))return un(i[1],this,r)}}))},Mr.conforms=function(t){return function(t){var n=xa(t);return function(r){return Gr(r,t,n)}}(qr(t,1))},Mr.constant=Wa,Mr.countBy=iu,Mr.create=function(t,n){var r=kr(t);return null==n?r:Kr(r,n)},Mr.curry=function t(n,r,e){var i=Yi(n,8,void 0,void 0,void 0,void 0,void 0,r=e?void 0:r);return i.placeholder=t.placeholder,i},Mr.curryRight=function t(n,r,e){var i=Yi(n,16,void 0,void 0,void 0,void 0,void 0,r=e?void 0:r);return i.placeholder=t.placeholder,i},Mr.debounce=xu,Mr.defaults=va,Mr.defaultsDeep=pa,Mr.defer=bu,Mr.delay=wu,Mr.difference=ko,Mr.differenceBy=Fo,Mr.differenceWith=Bo,Mr.drop=function(t,n,r){var e=null==t?0:t.length;return e?Xe(t,(n=r||void 0===n?1:ea(n))<0?0:n,e):[]},Mr.dropRight=function(t,n,r){var e=null==t?0:t.length;return e?Xe(t,0,(n=e-(n=r||void 0===n?1:ea(n)))<0?0:n):[]},Mr.dropRightWhile=function(t,n){return t&&t.length?ni(t,qi(n,3),!0,!0):[]},Mr.dropWhile=function(t,n){return t&&t.length?ni(t,qi(n,3),!0):[]},Mr.fill=function(t,n,r,e){var i=null==t?0:t.length;return i?(r&&"number"!=typeof r&&ao(t,n,r)&&(r=0,e=i),function(t,n,r,e){var i=t.length;for((r=ea(r))<0&&(r=-r>i?0:i+r),(e=void 0===e||e>i?i:ea(e))<0&&(e+=i),e=r>e?0:ia(e);r<e;)t[r++]=n;return t}(t,n,r,e)):[]},Mr.filter=function(t,n){return(Ou(t)?ln:ie)(t,qi(n,3))},Mr.flatMap=function(t,n){return oe(hu(t,n),1)},Mr.flatMapDeep=function(t,n){return oe(hu(t,n),1/0)},Mr.flatMapDepth=function(t,n,r){return r=void 0===r?1:ea(r),oe(hu(t,n),r)},Mr.flatten=Ro,Mr.flattenDeep=function(t){return(null==t?0:t.length)?oe(t,1/0):[]},Mr.flattenDepth=function(t,n){return(null==t?0:t.length)?oe(t,n=void 0===n?1:ea(n)):[]},Mr.flip=function(t){return Yi(t,512)},Mr.flow=Za,Mr.flowRight=Xa,Mr.fromPairs=function(t){for(var n=-1,r=null==t?0:t.length,e={};++n<r;){var i=t[n];e[i[0]]=i[1]}return e},Mr.functions=function(t){return null==t?[]:fe(t,xa(t))},Mr.functionsIn=function(t){return null==t?[]:fe(t,ba(t))},Mr.groupBy=cu,Mr.initial=function(t){return(null==t?0:t.length)?Xe(t,0,-1):[]},Mr.intersection=Po,Mr.intersectionBy=To,Mr.intersectionWith=Io,Mr.invert=ya,Mr.invertBy=_a,Mr.invokeMap=fu,Mr.iteratee=Va,Mr.keyBy=lu,Mr.keys=xa,Mr.keysIn=ba,Mr.map=hu,Mr.mapKeys=function(t,n){var r={};return n=qi(n,3),se(t,(function(t,e,i){Vr(r,n(t,e,i),t)})),r},Mr.mapValues=function(t,n){var r={};return n=qi(n,3),se(t,(function(t,e,i){Vr(r,e,n(t,e,i))})),r},Mr.matches=function(t){return Me(qr(t,1))},Mr.matchesProperty=function(t,n){return ke(t,qr(n,1))},Mr.memoize=Su,Mr.merge=wa,Mr.mergeWith=Sa,Mr.method=Ha,Mr.methodOf=$a,Mr.mixin=qa,Mr.negate=Lu,Mr.nthArg=function(t){return t=ea(t),Ie((function(n){return Be(n,t)}))},Mr.omit=La,Mr.omitBy=function(t,n){return ja(t,Lu(qi(n)))},Mr.once=function(t){return yu(2,t)},Mr.orderBy=function(t,n,r,e){return null==t?[]:(Ou(n)||(n=null==n?[]:[n]),Ou(r=e?void 0:r)||(r=null==r?[]:[r]),Ce(t,n,r))},Mr.over=Ja,Mr.overArgs=Au,Mr.overEvery=Qa,Mr.overSome=ts,Mr.partial=ju,Mr.partialRight=Eu,Mr.partition=vu,Mr.pick=Aa,Mr.pickBy=ja,Mr.property=ns,Mr.propertyOf=function(t){return function(n){return null==t?void 0:le(t,n)}},Mr.pull=No,Mr.pullAll=Uo,Mr.pullAllBy=function(t,n,r){return t&&t.length&&n&&n.length?Re(t,n,qi(r,2)):t},Mr.pullAllWith=function(t,n,r){return t&&t.length&&n&&n.length?Re(t,n,void 0,r):t},Mr.pullAt=Do,Mr.range=rs,Mr.rangeRight=es,Mr.rearg=Mu,Mr.reject=function(t,n){return(Ou(t)?ln:ie)(t,Lu(qi(n,3)))},Mr.remove=function(t,n){var r=[];if(!t||!t.length)return r;var e=-1,i=[],o=t.length;for(n=qi(n,3);++e<o;){var u=t[e];n(u,e,t)&&(r.push(u),i.push(e))}return ze(t,i),r},Mr.rest=function(t,n){if("function"!=typeof t)throw new _t(o);return Ie(t,n=void 0===n?n:ea(n))},Mr.reverse=Wo,Mr.sampleSize=function(t,n,r){return n=(r?ao(t,n,r):void 0===n)?1:ea(n),(Ou(t)?Nr:Ne)(t,n)},Mr.set=function(t,n,r){return null==t?t:Ue(t,n,r)},Mr.setWith=function(t,n,r,e){return e="function"==typeof e?e:void 0,null==t?t:Ue(t,n,r,e)},Mr.shuffle=function(t){return(Ou(t)?Ur:Ze)(t)},Mr.slice=function(t,n,r){var e=null==t?0:t.length;return e?(r&&"number"!=typeof r&&ao(t,n,r)?(n=0,r=e):(n=null==n?0:ea(n),r=void 0===r?e:ea(r)),Xe(t,n,r)):[]},Mr.sortBy=pu,Mr.sortedUniq=function(t){return t&&t.length?$e(t):[]},Mr.sortedUniqBy=function(t,n){return t&&t.length?$e(t,qi(n,2)):[]},Mr.split=function(t,n,r){return r&&"number"!=typeof r&&ao(t,n,r)&&(n=r=void 0),(r=void 0===r?4294967295:r>>>0)?(t=aa(t))&&("string"==typeof n||null!=n&&!Hu(n))&&!(n=Ge(n))&&Nn(t)?ci(Vn(t),0,r):t.split(n,r):[]},Mr.spread=function(t,n){if("function"!=typeof t)throw new _t(o);return n=null==n?0:ur(ea(n),0),Ie((function(r){var e=r[n],i=ci(r,0,n);return e&&dn(i,e),un(t,this,i)}))},Mr.tail=function(t){var n=null==t?0:t.length;return n?Xe(t,1,n):[]},Mr.take=function(t,n,r){return t&&t.length?Xe(t,0,(n=r||void 0===n?1:ea(n))<0?0:n):[]},Mr.takeRight=function(t,n,r){var e=null==t?0:t.length;return e?Xe(t,(n=e-(n=r||void 0===n?1:ea(n)))<0?0:n,e):[]},Mr.takeRightWhile=function(t,n){return t&&t.length?ni(t,qi(n,3),!1,!0):[]},Mr.takeWhile=function(t,n){return t&&t.length?ni(t,qi(n,3)):[]},Mr.tap=function(t,n){return n(t),t},Mr.throttle=function(t,n,r){var e=!0,i=!0;if("function"!=typeof t)throw new _t(o);return Wu(r)&&(e="leading"in r?!!r.leading:e,i="trailing"in r?!!r.trailing:i),xu(t,n,{leading:e,maxWait:n,trailing:i})},Mr.thru=ru,Mr.toArray=na,Mr.toPairs=Ea,Mr.toPairsIn=Ma,Mr.toPath=function(t){return Ou(t)?pn(t,jo):Gu(t)?[t]:yi(Ao(aa(t)))},Mr.toPlainObject=ua,Mr.transform=function(t,n,r){var e=Ou(t),i=e||Tu(t)||Ju(t);if(n=qi(n,4),null==r){var o=t&&t.constructor;r=i?e?new o:[]:Wu(t)&&Nu(o)?kr(Xt(t)):{}}return(i?sn:se)(t,(function(t,e,i){return n(r,t,e,i)})),r},Mr.unary=function(t){return gu(t,1)},Mr.union=Zo,Mr.unionBy=Xo,Mr.unionWith=Ko,Mr.uniq=function(t){return t&&t.length?Je(t):[]},Mr.uniqBy=function(t,n){return t&&t.length?Je(t,qi(n,2)):[]},Mr.uniqWith=function(t,n){return n="function"==typeof n?n:void 0,t&&t.length?Je(t,void 0,n):[]},Mr.unset=function(t,n){return null==t||Qe(t,n)},Mr.unzip=Vo,Mr.unzipWith=Ho,Mr.update=function(t,n,r){return null==t?t:ti(t,n,ui(r))},Mr.updateWith=function(t,n,r,e){return e="function"==typeof e?e:void 0,null==t?t:ti(t,n,ui(r),e)},Mr.values=ka,Mr.valuesIn=function(t){return null==t?[]:Cn(t,ba(t))},Mr.without=$o,Mr.words=Na,Mr.wrap=function(t,n){return ju(ui(n),t)},Mr.xor=qo,Mr.xorBy=Go,Mr.xorWith=Jo,Mr.zip=Qo,Mr.zipObject=function(t,n){return ii(t||[],n||[],Wr)},Mr.zipObjectDeep=function(t,n){return ii(t||[],n||[],Ue)},Mr.zipWith=tu,Mr.entries=Ea,Mr.entriesIn=Ma,Mr.extend=ca,Mr.extendWith=fa,qa(Mr,Mr),Mr.add=us,Mr.attempt=Ua,Mr.camelCase=Fa,Mr.capitalize=Ba,Mr.ceil=as,Mr.clamp=function(t,n,r){return void 0===r&&(r=n,n=void 0),void 0!==r&&(r=(r=oa(r))==r?r:0),void 0!==n&&(n=(n=oa(n))==n?n:0),$r(oa(t),n,r)},Mr.clone=function(t){return qr(t,4)},Mr.cloneDeep=function(t){return qr(t,5)},Mr.cloneDeepWith=function(t,n){return qr(t,5,n="function"==typeof n?n:void 0)},Mr.cloneWith=function(t,n){return qr(t,4,n="function"==typeof n?n:void 0)},Mr.conformsTo=function(t,n){return null==n||Gr(t,n,xa(n))},Mr.deburr=Ca,Mr.defaultTo=function(t,n){return null==t||t!=t?n:t},Mr.divide=ss,Mr.endsWith=function(t,n,r){t=aa(t),n=Ge(n);var e=t.length,i=r=void 0===r?e:$r(ea(r),0,e);return(r-=n.length)>=0&&t.slice(r,i)==n},Mr.eq=ku,Mr.escape=function(t){return(t=aa(t))&&Y.test(t)?t.replace(T,In):t},Mr.escapeRegExp=function(t){return(t=aa(t))&&V.test(t)?t.replace(K,"\\$&"):t},Mr.every=function(t,n,r){var e=Ou(t)?fn:re;return r&&ao(t,n,r)&&(n=void 0),e(t,qi(n,3))},Mr.find=ou,Mr.findIndex=Co,Mr.findKey=function(t,n){return xn(t,qi(n,3),se)},Mr.findLast=uu,Mr.findLastIndex=Oo,Mr.findLastKey=function(t,n){return xn(t,qi(n,3),ce)},Mr.floor=cs,Mr.forEach=au,Mr.forEachRight=su,Mr.forIn=function(t,n){return null==t?t:ue(t,qi(n,3),ba)},Mr.forInRight=function(t,n){return null==t?t:ae(t,qi(n,3),ba)},Mr.forOwn=function(t,n){return t&&se(t,qi(n,3))},Mr.forOwnRight=function(t,n){return t&&ce(t,qi(n,3))},Mr.get=da,Mr.gt=Fu,Mr.gte=Bu,Mr.has=function(t,n){return null!=t&&eo(t,n,de)},Mr.hasIn=ga,Mr.head=zo,Mr.identity=Ka,Mr.includes=function(t,n,r,e){t=zu(t)?t:ka(t),r=r&&!e?ea(r):0;var i=t.length;return r<0&&(r=ur(i+r,0)),qu(t)?r<=i&&t.indexOf(n,r)>-1:!!i&&wn(t,n,r)>-1},Mr.indexOf=function(t,n,r){var e=null==t?0:t.length;if(!e)return-1;var i=null==r?0:ea(r);return i<0&&(i=ur(e+i,0)),wn(t,n,i)},Mr.inRange=function(t,n,r){return n=ra(n),void 0===r?(r=n,n=0):r=ra(r),function(t,n,r){return t>=ar(n,r)&&t<ur(n,r)}(t=oa(t),n,r)},Mr.invoke=ma,Mr.isArguments=Cu,Mr.isArray=Ou,Mr.isArrayBuffer=Ru,Mr.isArrayLike=zu,Mr.isArrayLikeObject=Pu,Mr.isBoolean=function(t){return!0===t||!1===t||Zu(t)&&ve(t)==f},Mr.isBuffer=Tu,Mr.isDate=Iu,Mr.isElement=function(t){return Zu(t)&&1===t.nodeType&&!Vu(t)},Mr.isEmpty=function(t){if(null==t)return!0;if(zu(t)&&(Ou(t)||"string"==typeof t||"function"==typeof t.splice||Tu(t)||Ju(t)||Cu(t)))return!t.length;var n=ro(t);if(n==d||n==m)return!t.size;if(lo(t))return!Le(t).length;for(var r in t)if(Lt.call(t,r))return!1;return!0},Mr.isEqual=function(t,n){return xe(t,n)},Mr.isEqualWith=function(t,n,r){var e=(r="function"==typeof r?r:void 0)?r(t,n):void 0;return void 0===e?xe(t,n,void 0,r):!!e},Mr.isError=Yu,Mr.isFinite=function(t){return"number"==typeof t&&er(t)},Mr.isFunction=Nu,Mr.isInteger=Uu,Mr.isLength=Du,Mr.isMap=Xu,Mr.isMatch=function(t,n){return t===n||be(t,n,Ji(n))},Mr.isMatchWith=function(t,n,r){return r="function"==typeof r?r:void 0,be(t,n,Ji(n),r)},Mr.isNaN=function(t){return Ku(t)&&t!=+t},Mr.isNative=function(t){if(fo(t))throw new ht("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");return we(t)},Mr.isNil=function(t){return null==t},Mr.isNull=function(t){return null===t},Mr.isNumber=Ku,Mr.isObject=Wu,Mr.isObjectLike=Zu,Mr.isPlainObject=Vu,Mr.isRegExp=Hu,Mr.isSafeInteger=function(t){return Uu(t)&&t>=-9007199254740991&&t<=9007199254740991},Mr.isSet=$u,Mr.isString=qu,Mr.isSymbol=Gu,Mr.isTypedArray=Ju,Mr.isUndefined=function(t){return void 0===t},Mr.isWeakMap=function(t){return Zu(t)&&ro(t)==w},Mr.isWeakSet=function(t){return Zu(t)&&"[object WeakSet]"==ve(t)},Mr.join=function(t,n){return null==t?"":ir.call(t,n)},Mr.kebabCase=Oa,Mr.last=Yo,Mr.lastIndexOf=function(t,n,r){var e=null==t?0:t.length;if(!e)return-1;var i=e;return void 0!==r&&(i=(i=ea(r))<0?ur(e+i,0):ar(i,e-1)),n==n?function(t,n,r){for(var e=r+1;e--;)if(t[e]===n)return e;return e}(t,n,i):bn(t,Ln,i,!0)},Mr.lowerCase=Ra,Mr.lowerFirst=za,Mr.lt=Qu,Mr.lte=ta,Mr.max=function(t){return t&&t.length?ee(t,Ka,pe):void 0},Mr.maxBy=function(t,n){return t&&t.length?ee(t,qi(n,2),pe):void 0},Mr.mean=function(t){return An(t,Ka)},Mr.meanBy=function(t,n){return An(t,qi(n,2))},Mr.min=function(t){return t&&t.length?ee(t,Ka,je):void 0},Mr.minBy=function(t,n){return t&&t.length?ee(t,qi(n,2),je):void 0},Mr.stubArray=is,Mr.stubFalse=os,Mr.stubObject=function(){return{}},Mr.stubString=function(){return""},Mr.stubTrue=function(){return!0},Mr.multiply=ls,Mr.nth=function(t,n){return t&&t.length?Be(t,ea(n)):void 0},Mr.noConflict=function(){return Vt._===this&&(Vt._=kt),this},Mr.noop=Ga,Mr.now=du,Mr.pad=function(t,n,r){t=aa(t);var e=(n=ea(n))?Kn(t):0;if(!n||e>=n)return t;var i=(n-e)/2;return Ci(tr(i),r)+t+Ci(Qn(i),r)},Mr.padEnd=function(t,n,r){t=aa(t);var e=(n=ea(n))?Kn(t):0;return n&&e<n?t+Ci(n-e,r):t},Mr.padStart=function(t,n,r){t=aa(t);var e=(n=ea(n))?Kn(t):0;return n&&e<n?Ci(n-e,r)+t:t},Mr.parseInt=function(t,n,r){return r||null==n?n=0:n&&(n=+n),cr(aa(t).replace($,""),n||0)},Mr.random=function(t,n,r){if(r&&"boolean"!=typeof r&&ao(t,n,r)&&(n=r=void 0),void 0===r&&("boolean"==typeof n?(r=n,n=void 0):"boolean"==typeof t&&(r=t,t=void 0)),void 0===t&&void 0===n?(t=0,n=1):(t=ra(t),void 0===n?(n=t,t=0):n=ra(n)),t>n){var e=t;t=n,n=e}if(r||t%1||n%1){var i=fr();return ar(t+i*(n-t+Wt("1e-"+((i+"").length-1))),n)}return Pe(t,n)},Mr.reduce=function(t,n,r){var e=Ou(t)?gn:Mn,i=arguments.length<3;return e(t,qi(n,4),r,i,te)},Mr.reduceRight=function(t,n,r){var e=Ou(t)?yn:Mn,i=arguments.length<3;return e(t,qi(n,4),r,i,ne)},Mr.repeat=function(t,n,r){return n=(r?ao(t,n,r):void 0===n)?1:ea(n),Te(aa(t),n)},Mr.replace=function(){var t=arguments,n=aa(t[0]);return t.length<3?n:n.replace(t[1],t[2])},Mr.result=function(t,n,r){var e=-1,i=(n=ai(n,t)).length;for(i||(i=1,t=void 0);++e<i;){var o=null==t?void 0:t[jo(n[e])];void 0===o&&(e=i,o=r),t=Nu(o)?o.call(t):o}return t},Mr.round=hs,Mr.runInContext=t,Mr.sample=function(t){return(Ou(t)?Yr:Ye)(t)},Mr.size=function(t){if(null==t)return 0;if(zu(t))return qu(t)?Kn(t):t.length;var n=ro(t);return n==d||n==m?t.size:Le(t).length},Mr.snakeCase=Pa,Mr.some=function(t,n,r){var e=Ou(t)?_n:Ke;return r&&ao(t,n,r)&&(n=void 0),e(t,qi(n,3))},Mr.sortedIndex=function(t,n){return Ve(t,n)},Mr.sortedIndexBy=function(t,n,r){return He(t,n,qi(r,2))},Mr.sortedIndexOf=function(t,n){var r=null==t?0:t.length;if(r){var e=Ve(t,n);if(e<r&&ku(t[e],n))return e}return-1},Mr.sortedLastIndex=function(t,n){return Ve(t,n,!0)},Mr.sortedLastIndexBy=function(t,n,r){return He(t,n,qi(r,2),!0)},Mr.sortedLastIndexOf=function(t,n){if(null==t?0:t.length){var r=Ve(t,n,!0)-1;if(ku(t[r],n))return r}return-1},Mr.startCase=Ta,Mr.startsWith=function(t,n,r){return t=aa(t),r=null==r?0:$r(ea(r),0,t.length),n=Ge(n),t.slice(r,r+n.length)==n},Mr.subtract=vs,Mr.sum=function(t){return t&&t.length?kn(t,Ka):0},Mr.sumBy=function(t,n){return t&&t.length?kn(t,qi(n,2)):0},Mr.template=function(t,n,r){var e=Mr.templateSettings;r&&ao(t,n,r)&&(n=void 0),t=aa(t),n=fa({},n,e,Ni);var i,o,u=fa({},n.imports,e.imports,Ni),a=xa(u),s=Cn(u,a),c=0,f=n.interpolate||ft,l="__p += '",h=gt((n.escape||ft).source+"|"+f.source+"|"+(f===D?rt:ft).source+"|"+(n.evaluate||ft).source+"|$","g"),v="//# sourceURL="+(Lt.call(n,"sourceURL")?(n.sourceURL+"").replace(/\s/g," "):"lodash.templateSources["+ ++Yt+"]")+"\n";t.replace(h,(function(n,r,e,u,a,s){return e||(e=u),l+=t.slice(c,s).replace(lt,Yn),r&&(i=!0,l+="' +\n__e("+r+") +\n'"),a&&(o=!0,l+="';\n"+a+";\n__p += '"),e&&(l+="' +\n((__t = ("+e+")) == null ? '' : __t) +\n'"),c=s+n.length,n})),l+="';\n";var p=Lt.call(n,"variable")&&n.variable;p||(l="with (obj) {\n"+l+"\n}\n"),l=(o?l.replace(O,""):l).replace(R,"$1").replace(z,"$1;"),l="function("+(p||"obj")+") {\n"+(p?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(i?", __e = _.escape":"")+(o?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+l+"return __p\n}";var d=Ua((function(){return vt(a,v+"return "+l).apply(void 0,s)}));if(d.source=l,Yu(d))throw d;return d},Mr.times=function(t,n){if((t=ea(t))<1||t>9007199254740991)return[];var r=4294967295,e=ar(t,4294967295);t-=4294967295;for(var i=Fn(e,n=qi(n));++r<t;)n(r);return i},Mr.toFinite=ra,Mr.toInteger=ea,Mr.toLength=ia,Mr.toLower=function(t){return aa(t).toLowerCase()},Mr.toNumber=oa,Mr.toSafeInteger=function(t){return t?$r(ea(t),-9007199254740991,9007199254740991):0===t?t:0},Mr.toString=aa,Mr.toUpper=function(t){return aa(t).toUpperCase()},Mr.trim=function(t,n,r){if((t=aa(t))&&(r||void 0===n))return t.replace(H,"");if(!t||!(n=Ge(n)))return t;var e=Vn(t),i=Vn(n);return ci(e,Rn(e,i),zn(e,i)+1).join("")},Mr.trimEnd=function(t,n,r){if((t=aa(t))&&(r||void 0===n))return t.replace(q,"");if(!t||!(n=Ge(n)))return t;var e=Vn(t);return ci(e,0,zn(e,Vn(n))+1).join("")},Mr.trimStart=function(t,n,r){if((t=aa(t))&&(r||void 0===n))return t.replace($,"");if(!t||!(n=Ge(n)))return t;var e=Vn(t);return ci(e,Rn(e,Vn(n))).join("")},Mr.truncate=function(t,n){var r=30,e="...";if(Wu(n)){var i="separator"in n?n.separator:i;r="length"in n?ea(n.length):r,e="omission"in n?Ge(n.omission):e}var o=(t=aa(t)).length;if(Nn(t)){var u=Vn(t);o=u.length}if(r>=o)return t;var a=r-Kn(e);if(a<1)return e;var s=u?ci(u,0,a).join(""):t.slice(0,a);if(void 0===i)return s+e;if(u&&(a+=s.length-a),Hu(i)){if(t.slice(a).search(i)){var c,f=s;for(i.global||(i=gt(i.source,aa(et.exec(i))+"g")),i.lastIndex=0;c=i.exec(f);)var l=c.index;s=s.slice(0,void 0===l?a:l)}}else if(t.indexOf(Ge(i),a)!=a){var h=s.lastIndexOf(i);h>-1&&(s=s.slice(0,h))}return s+e},Mr.unescape=function(t){return(t=aa(t))&&I.test(t)?t.replace(P,Hn):t},Mr.uniqueId=function(t){var n=++At;return aa(t)+n},Mr.upperCase=Ia,Mr.upperFirst=Ya,Mr.each=au,Mr.eachRight=su,Mr.first=zo,qa(Mr,(fs={},se(Mr,(function(t,n){Lt.call(Mr.prototype,n)||(fs[n]=t)})),fs),{chain:!1}),Mr.VERSION="4.17.19",sn(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(t){Mr[t].placeholder=Mr})),sn(["drop","take"],(function(t,n){Cr.prototype[t]=function(r){r=void 0===r?1:ur(ea(r),0);var e=this.__filtered__&&!n?new Cr(this):this.clone();return e.__filtered__?e.__takeCount__=ar(r,e.__takeCount__):e.__views__.push({size:ar(r,4294967295),type:t+(e.__dir__<0?"Right":"")}),e},Cr.prototype[t+"Right"]=function(n){return this.reverse()[t](n).reverse()}})),sn(["filter","map","takeWhile"],(function(t,n){var r=n+1,e=1==r||3==r;Cr.prototype[t]=function(t){var n=this.clone();return n.__iteratees__.push({iteratee:qi(t,3),type:r}),n.__filtered__=n.__filtered__||e,n}})),sn(["head","last"],(function(t,n){var r="take"+(n?"Right":"");Cr.prototype[t]=function(){return this[r](1).value()[0]}})),sn(["initial","tail"],(function(t,n){var r="drop"+(n?"":"Right");Cr.prototype[t]=function(){return this.__filtered__?new Cr(this):this[r](1)}})),Cr.prototype.compact=function(){return this.filter(Ka)},Cr.prototype.find=function(t){return this.filter(t).head()},Cr.prototype.findLast=function(t){return this.reverse().find(t)},Cr.prototype.invokeMap=Ie((function(t,n){return"function"==typeof t?new Cr(this):this.map((function(r){return _e(r,t,n)}))})),Cr.prototype.reject=function(t){return this.filter(Lu(qi(t)))},Cr.prototype.slice=function(t,n){t=ea(t);var r=this;return r.__filtered__&&(t>0||n<0)?new Cr(r):(t<0?r=r.takeRight(-t):t&&(r=r.drop(t)),void 0!==n&&(r=(n=ea(n))<0?r.dropRight(-n):r.take(n-t)),r)},Cr.prototype.takeRightWhile=function(t){return this.reverse().takeWhile(t).reverse()},Cr.prototype.toArray=function(){return this.take(4294967295)},se(Cr.prototype,(function(t,n){var r=/^(?:filter|find|map|reject)|While$/.test(n),e=/^(?:head|last)$/.test(n),i=Mr[e?"take"+("last"==n?"Right":""):n],o=e||/^find/.test(n);i&&(Mr.prototype[n]=function(){var n=this.__wrapped__,u=e?[1]:arguments,a=n instanceof Cr,s=u[0],c=a||Ou(n),f=function(t){var n=i.apply(Mr,dn([t],u));return e&&l?n[0]:n};c&&r&&"function"==typeof s&&1!=s.length&&(a=c=!1);var l=this.__chain__,h=!!this.__actions__.length,v=o&&!l,p=a&&!h;if(!o&&c){n=p?n:new Cr(this);var d=t.apply(n,u);return d.__actions__.push({func:ru,args:[f],thisArg:void 0}),new Br(d,l)}return v&&p?t.apply(this,u):(d=this.thru(f),v?e?d.value()[0]:d.value():d)})})),sn(["pop","push","shift","sort","splice","unshift"],(function(t){var n=mt[t],r=/^(?:push|sort|unshift)$/.test(t)?"tap":"thru",e=/^(?:pop|shift)$/.test(t);Mr.prototype[t]=function(){var t=arguments;if(e&&!this.__chain__){var i=this.value();return n.apply(Ou(i)?i:[],t)}return this[r]((function(r){return n.apply(Ou(r)?r:[],t)}))}})),se(Cr.prototype,(function(t,n){var r=Mr[n];if(r){var e=r.name+"";Lt.call(mr,e)||(mr[e]=[]),mr[e].push({name:n,func:r})}})),mr[Mi(void 0,2).name]=[{name:"wrapper",func:void 0}],Cr.prototype.clone=function(){var t=new Cr(this.__wrapped__);return t.__actions__=yi(this.__actions__),t.__dir__=this.__dir__,t.__filtered__=this.__filtered__,t.__iteratees__=yi(this.__iteratees__),t.__takeCount__=this.__takeCount__,t.__views__=yi(this.__views__),t},Cr.prototype.reverse=function(){if(this.__filtered__){var t=new Cr(this);t.__dir__=-1,t.__filtered__=!0}else(t=this.clone()).__dir__*=-1;return t},Cr.prototype.value=function(){var t=this.__wrapped__.value(),n=this.__dir__,r=Ou(t),e=n<0,i=r?t.length:0,o=function(t,n,r){var e=-1,i=r.length;for(;++e<i;){var o=r[e],u=o.size;switch(o.type){case"drop":t+=u;break;case"dropRight":n-=u;break;case"take":n=ar(n,t+u);break;case"takeRight":t=ur(t,n-u)}}return{start:t,end:n}}(0,i,this.__views__),u=o.start,a=o.end,s=a-u,c=e?a:u-1,f=this.__iteratees__,l=f.length,h=0,v=ar(s,this.__takeCount__);if(!r||!e&&i==s&&v==s)return ri(t,this.__actions__);var p=[];t:for(;s--&&h<v;){for(var d=-1,g=t[c+=n];++d<l;){var y=f[d],_=y.iteratee,m=y.type,x=_(g);if(2==m)g=x;else if(!x){if(1==m)continue t;break t}}p[h++]=g}return p},Mr.prototype.at=eu,Mr.prototype.chain=function(){return nu(this)},Mr.prototype.commit=function(){return new Br(this.value(),this.__chain__)},Mr.prototype.next=function(){void 0===this.__values__&&(this.__values__=na(this.value()));var t=this.__index__>=this.__values__.length;return{done:t,value:t?void 0:this.__values__[this.__index__++]}},Mr.prototype.plant=function(t){for(var n,r=this;r instanceof Fr;){var e=Mo(r);e.__index__=0,e.__values__=void 0,n?i.__wrapped__=e:n=e;var i=e;r=r.__wrapped__}return i.__wrapped__=t,n},Mr.prototype.reverse=function(){var t=this.__wrapped__;if(t instanceof Cr){var n=t;return this.__actions__.length&&(n=new Cr(this)),(n=n.reverse()).__actions__.push({func:ru,args:[Wo],thisArg:void 0}),new Br(n,this.__chain__)}return this.thru(Wo)},Mr.prototype.toJSON=Mr.prototype.valueOf=Mr.prototype.value=function(){return ri(this.__wrapped__,this.__actions__)},Mr.prototype.first=Mr.prototype.head,Jt&&(Mr.prototype[Jt]=function(){return this}),Mr}();Vt._=$n,void 0===(i=function(){return $n}.call(n,r,n,e))||(e.exports=i)}).call(this)}).call(this,r(8),r(9)(t))},function(t,n){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(t){"object"==typeof window&&(r=window)}t.exports=r},function(t,n){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,n,r){"use strict";r.r(n),r.d(n,"glify",(function(){return C}));class e{constructor(){this.array=new Float32Array(16)}setSize(t,n,r){return this.array.set([2/t,0,0,0,0,-2/n,0,0,0,0,0,0,-1,1,0,1]),this}translateMatrix(t,n){const{array:r}=this;return r[12]+=r[0]*t+r[4]*n,r[13]+=r[1]*t+r[5]*n,r[14]+=r[2]*t+r[6]*n,r[15]+=r[3]*t+r[7]*n,this}scaleMatrix(t){const{array:n}=this;return n[0]*=t,n[1]*=t,n[2]*=t,n[3]*=t,n[4]*=t,n[5]*=t,n[6]*=t,n[7]*=t,this}}var i=r(0);class o extends i.Layer{constructor(t,n){super(),this._userDrawFunc=t,this._frame=null,this._redrawCallbacks=[],this._pane=n}drawing(t){return this._userDrawFunc=t,this}params(t){return i.Util.setOptions(this,t),this}redraw(t){return"function"==typeof t&&this._redrawCallbacks.push(t),null===this._frame&&(this._frame=i.Util.requestAnimFrame(this._redraw,this)),this}onAdd(t){this._map=t,this.canvas=this.canvas||document.createElement("canvas");const n=t.getSize(),r=t.options.zoomAnimation&&i.Browser.any3d;return this.canvas.width=n.x,this.canvas.height=n.y,this.canvas.className="leaflet-zoom-"+(r?"animated":"hide"),t._panes[this._pane].appendChild(this.canvas),t.on("moveend",this._reset,this),t.on("resize",this._resize,this),r&&t.on("zoomanim",i.Layer?this._animateZoom:this._animateZoomNoLayer,this),this._reset(),this}onRemove(t){return t.getPanes()[this._pane].removeChild(this.canvas),t.off("moveend",this._reset,this),t.off("resize",this._resize,this),t.options.zoomAnimation&&i.Browser.any3d&&t.off("zoomanim",i.Layer?this._animateZoom:this._animateZoomNoLayer,this),this}addTo(t){return t.addLayer(this),this}_resize(t){this.canvas.width=t.newSize.x,this.canvas.height=t.newSize.y}_reset(){const t=this._map.containerPointToLayerPoint([0,0]);i.DomUtil.setPosition(this.canvas,t),this._redraw()}_redraw(){const{_map:t,canvas:n}=this,r=t.getSize(),e=t.getBounds(),o=180*r.x/(20037508.34*(e.getEast()-e.getWest())),u=t.getZoom(),a=new i.LatLng(e.getNorth(),e.getWest()),s=this._unclampedProject(a,0);for(this._userDrawFunc&&this._userDrawFunc({bounds:e,canvas:n,offset:s,scale:Math.pow(2,u),size:r,zoomScale:o,zoom:u});this._redrawCallbacks.length>0;)this._redrawCallbacks.shift()(this);this._frame=null}_animateZoom(t){const{_map:n}=this,r=n.getZoomScale(t.zoom,n.getZoom()),e=this._unclampedLatLngBoundsToNewLayerBounds(n.getBounds(),t.zoom,t.center).min;i.DomUtil.setTransform(this.canvas,e,r)}_animateZoomNoLayer(t){const{_map:n}=this,r=n.getZoomScale(t.zoom,n.getZoom()),e=n._getCenterOffset(t.center)._multiplyBy(-r).subtract(n._getMapPanePos());i.DomUtil.setTransform(this.canvas,e,r)}_unclampedProject(t,n){const{crs:r}=this._map.options,{R:e}=r.projection,o=Math.PI/180,u=t.lat,a=Math.sin(u*o),s=new i.Point(e*t.lng*o,e*Math.log((1+a)/(1-a))/2),c=r.scale(n);return r.transformation._transform(s,c)}_unclampedLatLngBoundsToNewLayerBounds(t,n,r){const e=this._map._getNewPixelOrigin(r,n);return new i.Bounds([this._unclampedProject(t.getSouthWest(),n).subtract(e),this._unclampedProject(t.getNorthWest(),n).subtract(e),this._unclampedProject(t.getSouthEast(),n).subtract(e),this._unclampedProject(t.getNorthEast(),n).subtract(e)])}}class u{constructor(t){this.buffers={},this.attributeLocations={},this.uniformLocations={},t.pane||(t.pane="overlayPane"),this.mapMatrix=new e,this.active=!0,this.vertexShader=null,this.fragmentShader=null,this.program=null,this.matrix=null,this.vertices=null,this.vertexLines=null;const n=Boolean(t.preserveDrawingBuffer),r=this.layer=new o(t=>this.drawOnCanvas(t),t.pane).addTo(t.map),i=this.canvas=r.canvas;i.width=i.clientWidth,i.height=i.clientHeight,i.style.position="absolute",t.className&&(i.className+=" "+t.className),this.gl=i.getContext("webgl2",{preserveDrawingBuffer:n})||i.getContext("webgl",{preserveDrawingBuffer:n})||i.getContext("experimental-webgl",{preserveDrawingBuffer:n})}attachShaderVariables(t){if(0===this.getShaderVariableCount())return this;const{gl:n,settings:r}=this,{shaderVariables:e}=r;let i=0;for(const r in e){if(!e.hasOwnProperty(r))continue;const o=e[r],u=this.getAttributeLocation(r);if(u<0)throw new Error("shader variable "+r+" not found");n.vertexAttribPointer(u,o.size,n[o.type],!!o.normalize,this.bytes*t,i*t),i+=o.size,n.enableVertexAttribArray(u)}return this}getShaderVariableCount(){return Object.keys(this.settings.shaderVariables).length}setData(t){return this.settings.data=t,this}setup(){const t=this.settings;return t.click&&t.setupClick(t.map),t.hover&&t.setupHover(t.map,t.hoverWait),this.setupVertexShader().setupFragmentShader().setupProgram()}setupVertexShader(){const t=this.gl,n=this.settings,r="function"==typeof n.vertexShaderSource?n.vertexShaderSource():n.vertexShaderSource,e=t.createShader(t.VERTEX_SHADER);return t.shaderSource(e,r),t.compileShader(e),this.vertexShader=e,this}setupFragmentShader(){const t=this.gl,n=this.settings,r="function"==typeof n.fragmentShaderSource?n.fragmentShaderSource():n.fragmentShaderSource,e=t.createShader(t.FRAGMENT_SHADER);return t.shaderSource(e,r),t.compileShader(e),this.fragmentShader=e,this}setupProgram(){const t=this.gl,n=t.createProgram();return t.attachShader(n,this.vertexShader),t.attachShader(n,this.fragmentShader),t.linkProgram(n),t.useProgram(n),t.blendFunc(t.SRC_ALPHA,t.ONE_MINUS_SRC_ALPHA),t.enable(t.BLEND),this.program=n,this}addTo(t){return this.layer.addTo(t||this.settings.map),this.active=!0,this.render()}remove(t){if(void 0===t)this.settings.map.removeLayer(this.layer),this.active=!1;else{const n=this.settings.data.features||this.settings.data;"number"==typeof(t=t instanceof Array?t:[t])&&(t=[t]),t.sort().reverse(),t.forEach(t=>{n.splice(t,1)}),this.render()}return this}update(t,n){return(this.settings.data.features||this.settings.data)[n]=t,this.render(),this}getBuffer(t){return this.buffers[t]||(this.buffers[t]=this.gl.createBuffer()),this.buffers[t]}getAttributeLocation(t){return void 0!==this.attributeLocations[t]?this.attributeLocations[t]:this.attributeLocations[t]=this.gl.getAttribLocation(this.program,t)}getUniformLocation(t){return void 0!==this.uniformLocations[t]?this.uniformLocations[t]:this.uniformLocations[t]=this.gl.getUniformLocation(this.program,t)}}const a={r:0,g:1,b:0,a:1},s={r:1,g:0,b:0,a:1},c={r:0,g:0,b:1,a:1},f={r:0,g:1,b:1,a:1},l={r:1,g:1,b:0,a:1},h={r:.5,g:.5,b:.5,a:1};class v{static get grey(){return h}static fromHex(t){if(t.length<6)return null;"#"===(t=t.toLowerCase())[0]&&(t=t.substring(1,t.length));return{r:parseInt(t[0]+t[1],16)/255,g:parseInt(t[2]+t[3],16)/255,b:parseInt(t[4]+t[5],16)/255,a:1}}static random(){return{r:Math.random(),g:Math.random(),b:Math.random(),a:Math.random()}}static pallet(){switch(Math.round(4*Math.random())){case 0:return a;case 1:return s;case 2:return c;case 3:return f;case 4:return l}}}class p{constructor(t){this.settings=t,this.vertexCount=0,this.array=[],this.length=0}fillFromCoordinates(t){const{color:n,opacity:r,project:e,latitudeKey:o,longitudeKey:u}=this.settings;for(let a=0;a<t.length;a++){if(Array.isArray(t[a][0])){this.fillFromCoordinates(t[a]);continue}const s=e(new i.LatLng(t[a][o],t[a][u]),0);this.push(s.x,s.y,n.r,n.g,n.b,n.a||r),0!==a&&a!==t.length-1&&(this.vertexCount+=1),this.vertexCount+=1}}push(...t){this.array.push(...t),this.length=this.array.length}}function d(t,n){const r=Math.PI/180,e=4*Math.PI,i=Math.sin(t*r);return{x:(n+180)/360*256,y:256*(.5-Math.log((1+i)/(1-i))/e)}}function g(t,n,r){return(t.x-n.x)*(t.x-n.x)+(t.y-n.y)*(t.y-n.y)<=r*r}function y(t,n,r,e,i,o){const u=i-r,a=o-e,s=u*u+a*a;let c,f,l=-1;0!==s&&(l=((t-r)*u+(n-e)*a)/s),l<0?(c=r,f=e):l>1?(c=i,f=o):(c=r+l*u,f=e+l*a);let h=t-c,v=n-f;return Math.sqrt(h*h+v*v)}function _(t,n,r){const e=r.latLngToLayerPoint(t),i=r.latLngToLayerPoint(n);return function(t,n){return Math.sqrt(t*t+n*n)}(e.x-i.x,e.y-i.y)}const m={map:null,data:[],longitudeKey:null,latitudeKey:null,setupClick:null,setupHover:null,vertexShaderSource:null,fragmentShaderSource:null,click:null,hover:null,color:v.random,className:"",opacity:.5,weight:2,sensitivity:.1,sensitivityHover:.03,shaderVariables:{vertex:{type:"FLOAT",start:0,size:2},color:{type:"FLOAT",start:2,size:4}}};class x extends u{constructor(t){if(super(t),this.bytes=6,x.instances.push(this),this.settings=Object.assign(Object.assign({},x.defaults),t),!t.data)throw new Error('no "data" array setting defined');if(!t.map)throw new Error('no leaflet "map" object setting defined');this.active=!0,this.allVertices=[],this.setup().render()}render(){this.resetVertices();const{canvas:t,gl:n,layer:r,vertices:e,settings:i,mapMatrix:o}=this,u=this.getBuffer("vertex"),a=this.getAttributeLocation("vertex"),s=this.getUniformLocation("opacity");n.uniform1f(s,i.opacity),n.bindBuffer(n.ARRAY_BUFFER,u);let c=e.length;const f=[];for(let t=0;t<c;t++){const n=e[t].array,r=n.length/this.bytes;for(let t=0;t<r;t++){const e=t*this.bytes;0!==t&&t!==r-1&&f.push(n[e],n[e+1],n[e+2],n[e+3],n[e+4],n[e+5]),f.push(n[e],n[e+1],n[e+2],n[e+3],n[e+4],n[e+5])}}this.allVertices=f;const l=new Float32Array(f);return c=l.BYTES_PER_ELEMENT,n.bufferData(n.ARRAY_BUFFER,l,n.STATIC_DRAW),n.vertexAttribPointer(a,2,n.FLOAT,!1,c*this.bytes,0),n.enableVertexAttribArray(a),this.matrix=this.getUniformLocation("matrix"),this.aPointSize=this.getAttributeLocation("pointSize"),o.setSize(t.width,t.height),n.viewport(0,0,t.width,t.height),n.uniformMatrix4fv(this.matrix,!1,o.array),this.attachShaderVariables(c),r.redraw(),this}resetVertices(){this.allVertices=[],this.vertices=[];const t=this.vertices,n=this.settings,r=n.data.features,e=n.map,i=n.latitudeKey,o=n.longitudeKey,u=r.length;let a,s,c,{color:f,opacity:l}=n,h=0;if(!f)throw new Error("color is not properly defined");for("function"==typeof f&&(s=f);h<u;h++){a=r[h],c=s?s(h,a):f;const n=new p({project:e.project.bind(e),latitudeKey:i,longitudeKey:o,color:c,opacity:l});n.fillFromCoordinates(a.geometry.coordinates),t.push(n)}return this}drawOnCanvas(t){if(!this.gl)return this;const{gl:n,settings:r,canvas:e,mapMatrix:i,matrix:o,allVertices:u,vertices:a}=this,{weight:s}=r,{scale:c,offset:f,zoom:l}=t,h=Math.max(l-4,4);if(n.clear(n.COLOR_BUFFER_BIT),n.viewport(0,0,e.width,e.height),n.viewport(0,0,e.width,e.height),n.vertexAttrib1f(this.aPointSize,h),i.setSize(e.width,e.height).scaleMatrix(c),l>18)i.translateMatrix(-f.x,-f.y),n.uniformMatrix4fv(o,!1,i.array),n.drawArrays(n.LINES,0,u.length/this.bytes);else if("number"==typeof s)for(let t=-s;t<s;t+=.5)for(let r=-s;r<s;r+=.5)i.translateMatrix(-f.x+r/c,-f.y+t/c),n.uniformMatrix4fv(o,!1,i.array),n.drawArrays(n.LINES,0,u.length/this.bytes);else if("function"==typeof s){let t=0;const e=r.data.features;for(let r=0;r<a.length;r++){const o=a[r].vertexCount,u=s(r,e[r]);for(let r=-u;r<u;r+=.5)for(let e=-u;e<u;e+=.5)i.translateMatrix(-f.x+e/c,-f.y+r/c),n.uniformMatrix4fv(this.matrix,!1,i.array),n.drawArrays(n.LINES,t,o);t+=o}}return this}static tryClick(t,n){let r,e,i=!1,o=null;x.instances.forEach((function(u){e=u.settings,r=e.sensitivity;const{latitudeKey:a,longitudeKey:s}=e;u.active&&e.map===n&&e.click&&e.data.features.map(n=>{for(let e=1;e<n.geometry.coordinates.length;e++){let c=y(t.latlng.lng,t.latlng.lat,n.geometry.coordinates[e-1][s],n.geometry.coordinates[e-1][a],n.geometry.coordinates[e][s],n.geometry.coordinates[e][a]);c<r&&(r=c,i=n,o=u)}})})),o&&o.settings.click(t,i)}static tryHover(t,n){let r,e,o=!1,u=null;x.instances.forEach((function(a){r=a.settings,e=r.sensitivityHover;const{latitudeKey:s,longitudeKey:c}=r;if(!a.active)return;if(r.map!==n)return;if(!r.hover)return;let f=Object(i.geoJSON)(r.data.features).getBounds();(function(t,n){return n._northEast.lat>t.lat&&t.lat>n._southWest.lat&&n._northEast.lng>t.lng&&t.lng>n._southWest.lng})(t.latlng,f)&&r.data.features.map(n=>{for(let r=1;r<n.geometry.coordinates.length;r++){let i=y(t.latlng.lng,t.latlng.lat,n.geometry.coordinates[r-1][c],n.geometry.coordinates[r-1][s],n.geometry.coordinates[r][c],n.geometry.coordinates[r][s]);i<e&&(e=i,o=n,u=a)}})})),u&&u.settings.hover(t,o)}}x.defaults=m,x.instances=[];const b={map:null,data:[],longitudeKey:null,latitudeKey:null,setupClick:null,setupHover:null,vertexShaderSource:null,fragmentShaderSource:null,eachVertex:null,click:null,hover:null,color:v.random,opacity:.8,size:null,className:"",sensitivity:2,sensitivityHover:.03,shaderVariables:{vertex:{type:"FLOAT",start:0,size:2},color:{type:"FLOAT",start:2,size:4},pointSize:{type:"FLOAT",start:6,size:1}}};class w extends u{constructor(t){if(super(t),this.bytes=7,w.instances.push(this),this.settings=Object.assign(Object.assign({},w.defaults),t),!t.data)throw new Error('no "data" array setting defined');if(!t.map)throw new Error('no leaflet "map" object setting defined');this.active=!0;const{data:n}=this.settings;if(Array.isArray(n))this.dataFormat="Array";else{if("FeatureCollection"!==n.type)throw new Error("unhandled data type. Supported types are Array and GeoJson.FeatureCollection");this.dataFormat="GeoJson.FeatureCollection"}this.settings.map.options.crs.projection.project!==i.Projection.SphericalMercator.project&&console.warn("layer designed for SphericalMercator, alternate detected"),this.setup().render()}render(){this.resetVertices();const{gl:t,canvas:n,layer:r,vertices:e,mapMatrix:i}=this,o=this.matrix=this.getUniformLocation("matrix"),u=this.getBuffer("vertices"),a=this.typedVertices=new Float32Array(e),s=a.BYTES_PER_ELEMENT;return i.setSize(n.width,n.height),t.viewport(0,0,n.width,n.height),t.uniformMatrix4fv(o,!1,i.array),t.bindBuffer(t.ARRAY_BUFFER,u),t.bufferData(t.ARRAY_BUFFER,a,t.STATIC_DRAW),this.attachShaderVariables(s),r.redraw(),this}getPointLookup(t){return this.latLngLookup[t]||(this.latLngLookup[t]=[])}addLookup(t){return this.getPointLookup(t.key).push(t),this.allLatLngLookup.push(t),this}resetVertices(){this.latLngLookup={},this.allLatLngLookup=[],this.vertices=[];const{vertices:t,settings:n}=this,{latitudeKey:r,longitudeKey:e,data:o,map:u,eachVertex:a,color:s,size:c,opacity:f}=n;let l,h,v,p,d,g,y;if(!s)throw new Error("color is not properly defined");if("function"==typeof s&&(l=s),!c)throw new Error("size is not properly defined");if("function"==typeof c&&(p=c),"Array"===this.dataFormat){const n=o.length;for(let _=0;_<n;_++)d=o[_],y=d[r].toFixed(2)+"x"+d[e].toFixed(2),g=u.project(new i.LatLng(d[r],d[e]),0),h=l?l(_,d):s,h=Object.assign(Object.assign({},h),{a:h.a||f}),v=p?p(_,d):c,t.push(g.x,g.y,h.r,h.g,h.b,h.a,v),this.addLookup({latLng:d,key:y,pixel:g,chosenColor:h,chosenSize:v}),a&&a.call(this,d,g,v)}else if("GeoJson.FeatureCollection"===this.dataFormat){const n=o.features.length;for(let _=0;_<n;_++){const n=o.features[_];d=n.geometry.coordinates,y=d[r].toFixed(2)+"x"+d[e].toFixed(2),g=u.project(new i.LatLng(d[r],d[e]),0),h=l?l(_,n):s,h=Object.assign(Object.assign({},h),{a:h.a||f}),v=p?p(_,d):c,t.push(g.x,g.y,h.r,h.g,h.b,h.a,v),this.addLookup({latLng:d,key:y,pixel:g,chosenColor:h,chosenSize:v,feature:n}),a&&a.call(this,d,g,v)}}return this}pointSize(t){const{map:n,size:r}=this.settings,e="function"==typeof r?r(t,null):r,i=n.getZoom();return null===e?Math.max(i-4,1):e}drawOnCanvas(t){if(!this.gl)return this;const{gl:n,canvas:r,settings:e,mapMatrix:i,matrix:o}=this,{map:u}=e,{offset:a}=t,s=u.getZoom(),c=Math.pow(2,s);return i.setSize(r.width,r.height).scaleMatrix(c).translateMatrix(-a.x,-a.y),n.clear(n.COLOR_BUFFER_BIT),n.viewport(0,0,r.width,r.height),n.uniformMatrix4fv(o,!1,i.array),n.drawArrays(n.POINTS,0,this.allLatLngLookup.length),this}lookup(t){const n=t.lat+.03,r=t.lng+.03,e=[];let i,o,u,a,s,c=t.lat-.03;for(;c<=n;c+=.01)for(i=t.lng-.03;i<=r;i+=.01)if(s=c.toFixed(2)+"x"+i.toFixed(2),a=this.latLngLookup[s],a)for(o=0,u=a.length;o<u;o++)e.push(a[o]);const{map:f}=this.settings;return w.closest(t,e.length>0?e:this.allLatLngLookup,f)}static closest(t,n,r){return n.length<1?null:n.reduce((n,e)=>_(t,n.latLng,r)<_(t,e.latLng,r)?n:e)}static tryClick(t,n){const r=[],e={};let o,u,a,s,c,f,l;if(w.instances.forEach(i=>{u=i.settings,i.active&&u.map===n&&u.click&&(s=i.lookup(t.latlng),e[s.key]=i,r.push(s))}),r.length<1)return;if(!u)return;if(f=this.closest(t.latlng,r,n),null===f)return;if(a=e[f.key],!a)return;const{latitudeKey:h,longitudeKey:v,sensitivity:p,click:d}=a.settings;return l=new i.LatLng(f.latLng[h],f.latLng[v]),c=n.latLngToLayerPoint(l),g(c,t.layerPoint,f.chosenSize*p)?(o=d(t,f.feature||f.latLng,c),void 0===o||o):void 0}static tryHover(t,n){const r=[],e={};let o,u,a,s,c,f,l;if(w.instances.forEach(i=>{u=i.settings,i.active&&u.map===n&&u.hover&&(s=i.lookup(t.latlng),e[s.key]=i,r.push(s))}),r.length<1)return;if(!u)return;if(f=this.closest(t.latlng,r,n),null===f)return;if(a=e[f.key],!a)return;const{latitudeKey:h,longitudeKey:v,sensitivityHover:p,hover:d}=a.settings;return l=new i.LatLng(f.latLng[h],f.latLng[v]),c=n.latLngToLayerPoint(l),g(c,t.layerPoint,f.chosenSize*p)?(o=d(t,f.feature||f.latLng,c),void 0===o||o):void 0}}w.instances=[],w.defaults=b,w.maps=[];var S=r(1),L=r.n(S);function A(t){switch(t&&t.type||null){case"FeatureCollection":return t.features=t.features.reduce((function(t,n){return t.concat(A(n))}),[]),t;case"Feature":return t.geometry?A(t.geometry).map((function(n){var r={type:"Feature",properties:JSON.parse(JSON.stringify(t.properties)),geometry:n};return void 0!==t.id&&(r.id=t.id),r})):[t];case"MultiPoint":return t.coordinates.map((function(t){return{type:"Point",coordinates:t}}));case"MultiPolygon":return t.coordinates.map((function(t){return{type:"Polygon",coordinates:t}}));case"MultiLineString":return t.coordinates.map((function(t){return{type:"LineString",coordinates:t}}));case"GeometryCollection":return t.geometries.map(A).reduce((function(t,n){return t.concat(n)}),[]);case"Point":case"Polygon":case"LineString":return[t]}}var j=r(2),E=r.n(j);const M={map:null,data:[],longitudeKey:null,latitudeKey:null,setupClick:null,setupHover:null,vertexShaderSource:null,fragmentShaderSource:null,click:null,hover:null,color:v.random,className:"",opacity:.5,shaderVariables:{vertex:{type:"FLOAT",start:0,size:2},color:{type:"FLOAT",start:2,size:4}},border:!1};class k extends u{constructor(t){if(super(t),this.bytes=6,k.instances.push(this),this.settings=Object.assign(Object.assign({},k.defaults),t),!t.data)throw new Error('no "data" array setting defined');if(!t.map)throw new Error('no leaflet "map" object setting defined');this.polygonLookup=null,this.setup().render()}render(){this.resetVertices();const{canvas:t,gl:n,layer:r,vertices:e,mapMatrix:i}=this,o=this.getBuffer("vertex"),u=new Float32Array(e),a=u.BYTES_PER_ELEMENT,s=this.getAttributeLocation("vertex");return n.bindBuffer(n.ARRAY_BUFFER,o),n.bufferData(n.ARRAY_BUFFER,u,n.STATIC_DRAW),n.vertexAttribPointer(s,2,n.FLOAT,!1,a*this.bytes,0),n.enableVertexAttribArray(s),this.matrix=this.getUniformLocation("matrix"),n.viewport(0,0,t.width,t.height),i.setSize(t.width,t.height),n.uniformMatrix4fv(this.matrix,!1,i.array),this.attachShaderVariables(a),r.redraw(),this}resetVertices(){this.vertices=[],this.vertexLines=[],this.polygonLookup=new E.a;const{vertices:t,vertexLines:n,polygonLookup:r,settings:e}=this,o=e.data;let u,a,s,c,f,l,h,v,p,g,y,_,{color:m,opacity:x}=e,b=0;switch(o.type){case"Feature":r.loadFeatureCollection({type:"FeatureCollection",features:[o]}),s=A(o);break;case"MultiPolygon":r.loadFeatureCollection({type:"FeatureCollection",features:[{type:"Feature",properties:{id:"bar"},geometry:{coordinates:o.coordinates}}]}),s=A(o);break;default:r.loadFeatureCollection(o),s=o.features}if(v=s.length,!m)throw new Error("color is not properly defined");for("function"==typeof m&&(f=m);b<v;b++){c=s[b],p=[],l=f?f(b,c):m,h=(c.geometry||c).coordinates,y=L.a.flatten(h),g=L()(y.vertices,y.holes,y.dimensions),_=h[0][0].length;for(let t=0,n=g.length;t<n;t++){if(a=g[t],"number"!=typeof y.vertices[0])throw new Error("unhandled polygon");p.push(y.vertices[a*_+e.longitudeKey],y.vertices[a*_+e.latitudeKey])}for(let n=0,r=p.length;n<r;n)u=e.map.project(new i.LatLng(p[n++],p[n++]),0),t.push(u.x,u.y,l.r,l.g,l.b,l.a||x);if(e.border){let t=[];for(let n=1,r=y.vertices.length;n<r;n+=2)t.push(y.vertices[n],y.vertices[n-1]),t.push(y.vertices[n+2],y.vertices[n+1]);for(let r=0,e=t.length;r<e;r)u=d(t[r++],t[r++]),n.push(u.x,u.y,l.r,l.g,l.b,l.a||x)}}return this}drawOnCanvas(t){if(!this.gl)return this;const{scale:n,offset:r,canvas:e}=t,{mapMatrix:i,gl:o,vertices:u,settings:a,vertexLines:s}=this;if(i.setSize(e.width,e.height).scaleMatrix(n).translateMatrix(-r.x,-r.y),o.clear(o.COLOR_BUFFER_BIT),o.viewport(0,0,e.width,e.height),o.uniformMatrix4fv(this.matrix,!1,i.array),a.border){const t=this.getBuffer("vertexLines"),n=new Float32Array(s),r=n.BYTES_PER_ELEMENT,i=this.getAttributeLocation("vertex");o.bindBuffer(o.ARRAY_BUFFER,null),o.bindBuffer(o.ARRAY_BUFFER,t),o.bufferData(o.ARRAY_BUFFER,n,o.STATIC_DRAW),null!==this.settings.shaderVariables&&this.attachShaderVariables(r),o.vertexAttribPointer(i,3,o.FLOAT,!1,r*this.bytes,0),o.enableVertexAttribArray(i),o.enable(o.DEPTH_TEST),o.viewport(0,0,e.width,e.height),o.drawArrays(o.LINES,0,s.length/this.bytes);const c=this.getBuffer("vertex"),f=new Float32Array(u);o.bindBuffer(o.ARRAY_BUFFER,null),o.bindBuffer(o.ARRAY_BUFFER,c),o.bufferData(o.ARRAY_BUFFER,f,o.STATIC_DRAW),null!==a.shaderVariables&&this.attachShaderVariables(r),o.vertexAttribPointer(i,2,o.FLOAT,!1,r*this.bytes,0),o.enableVertexAttribArray(i),o.enable(o.DEPTH_TEST),o.viewport(0,0,e.width,e.height)}return o.drawArrays(o.TRIANGLES,0,u.length/this.bytes),this}static tryClick(t,n){let r,e,i;return k.instances.forEach((function(o){e=o.settings,o.active&&e.map===n&&e.click&&(i=o.polygonLookup.search(t.latlng.lng,t.latlng.lat),i&&(r=e.click(t,i)))})),void 0===r||r}static tryHover(t,n){let r,e,i;return k.instances.forEach((function(o){e=o.settings,o.active&&e.map===n&&e.hover&&(i=o.polygonLookup.search(t.latlng.lng,t.latlng.lat),i&&(r=e.hover(t,i)))})),void 0===r||r}}k.instances=[],k.defaults=M;const F={vertex:"#define GLSLIFY 1\nuniform mat4 matrix;\nattribute vec4 vertex;\nattribute vec4 color;\nattribute float pointSize;\nvarying vec4 _color;\n\nvoid main() {\n  //set the size of the point\n  gl_PointSize = pointSize;\n\n  //multiply each vertex by a matrix.\n  gl_Position = matrix * vertex;\n\n  //pass the color to the fragment shader\n  _color = color;\n}\n",fragment:{dot:"precision mediump float;\n#define GLSLIFY 1\nuniform vec4 color;\n\nvoid main() {\n    float border = 0.05;\n    float radius = 0.5;\n    vec2 center = vec2(0.5);\n\n    vec4 color0 = vec4(0.0);\n    vec4 color1 = vec4(color[0], color[1], color[2], color[3]);\n\n    vec2 m = gl_PointCoord.xy - center;\n    float dist = radius - sqrt(m.x * m.x + m.y * m.y);\n\n    float t = 0.0;\n    if (dist > border) {\n        t = 1.0;\n    } else if (dist > 0.0) {\n        t = dist / border;\n    }\n\n    //works for overlapping circles if blending is enabled\n    gl_FragColor = mix(color0, color1, t);\n}\n",point:"precision mediump float;\n#define GLSLIFY 1\nvarying vec4 _color;\n\nvoid main() {\n  float border = 0.1;\n  float radius = 0.5;\n  vec2 center = vec2(0.5, 0.5);\n\n  vec4 pointColor = vec4(\n    _color[0],\n    _color[1],\n    _color[2],\n    _color[3]\n  );\n\n  vec2 m = gl_PointCoord.xy - center;\n  float dist1 = radius - sqrt(m.x * m.x + m.y * m.y);\n\n  float t1 = 0.0;\n  if (dist1 > border) {\n      t1 = 1.0;\n  } else if (dist1 > 0.0) {\n      t1 = dist1 / border;\n  }\n\n  //works for overlapping circles if blending is enabled\n  //gl_FragColor = mix(color0, color1, t);\n\n  //border\n  float outerBorder = 0.05;\n  float innerBorder = 0.8;\n  vec4 borderColor = vec4(0, 0, 0, 0.4);\n  vec2 uv = gl_PointCoord.xy;\n  vec4 clearColor = vec4(0, 0, 0, 0);\n\n  // Offset uv with the center of the circle.\n  uv -= center;\n\n  float dist2 =  sqrt(dot(uv, uv));\n\n  float t2 = 1.0 + smoothstep(radius, radius + outerBorder, dist2)\n                - smoothstep(radius - innerBorder, radius, dist2);\n\n  gl_FragColor = mix(mix(borderColor, clearColor, t2), pointColor, t1);\n}\n",puck:"precision mediump float;\n#define GLSLIFY 1\nvarying vec4 _color;\n\nvoid main() {\n  vec2 center = vec2(0.5);\n  vec2 uv = gl_PointCoord.xy - center;\n  float smoothing = 0.005;\n  vec4 _color1 = vec4(_color[0], _color[1], _color[2], _color[3]);\n  float radius1 = 0.3;\n  vec4 _color2 = vec4(_color[0], _color[1], _color[2], _color[3]);\n  float radius2 = 0.5;\n  float dist = length(uv);\n\n  //SMOOTH\n  float gamma = 2.2;\n  color1.rgb = pow(_color1.rgb, vec3(gamma));\n  color2.rgb = pow(_color2.rgb, vec3(gamma));\n\n  vec4 puck = mix(\n    mix(\n      _color1,\n      _color2,\n      smoothstep(\n        radius1 - smoothing,\n        radius1 + smoothing,\n        dist\n      )\n    ),\n    vec4(0,0,0,0),\n      smoothstep(\n        radius2 - smoothing,\n        radius2 + smoothing,\n        dist\n    )\n  );\n\n  //Gamma correction (prevents color fringes)\n  puck.rgb = pow(puck.rgb, vec3(1.0 / gamma));\n  gl_FragColor = puck;\n}\n",simpleCircle:"precision mediump float;\n#define GLSLIFY 1\nvarying vec4 _color;\n\nvoid main() {\n    vec4 color1 = vec4(_color[0], _color[1], _color[2], _color[3]);\n\n    //simple circles\n    float d = distance (gl_PointCoord, vec2(0.5, 0.5));\n    if (d < 0.5 ){\n        gl_FragColor = color1;\n    } else {\n        discard;\n    }\n}\n",square:"precision mediump float;\n#define GLSLIFY 1\nvarying vec4 _color;\n\nvoid main() {\n    //squares\n    gl_FragColor = vec4(_color[0], _color[1], _color[2], _color[3]);\n}\n",polygon:"precision mediump float;\n#define GLSLIFY 1\nvarying vec4 _color;\n\nvoid main() {\n  gl_FragColor = vec4(\n    _color[0],\n    _color[1],\n    _color[2],\n    _color[3]\n  );\n}\n"}};class B{constructor(){this.longitudeKey=1,this.latitudeKey=0,this.maps=[],this.shader=F,this.Points=w,this.Shapes=k,this.Lines=x}longitudeFirst(){return this.longitudeKey=0,this.latitudeKey=1,this}latitudeFirst(){return this.latitudeKey=0,this.longitudeKey=1,this}get instances(){return[...w.instances,...x.instances,...k.instances]}points(t){return new this.Points(Object.assign({setupClick:C.setupClick.bind(this),setupHover:this.setupHover.bind(this),latitudeKey:C.latitudeKey,longitudeKey:C.longitudeKey,vertexShaderSource:()=>this.shader.vertex,fragmentShaderSource:()=>this.shader.fragment.point},t))}shapes(t){return new this.Shapes(Object.assign({setupClick:this.setupClick.bind(this),setupHover:this.setupHover.bind(this),latitudeKey:this.latitudeKey,longitudeKey:this.longitudeKey,vertexShaderSource:()=>this.shader.vertex,fragmentShaderSource:()=>this.shader.fragment.polygon},t))}lines(t){return new this.Lines(Object.assign({setupClick:this.setupClick.bind(this),setupHover:this.setupHover.bind(this),latitudeKey:this.latitudeKey,longitudeKey:this.longitudeKey,vertexShaderSource:()=>this.shader.vertex,fragmentShaderSource:()=>this.shader.fragment.polygon},t))}setupClick(t){this.maps.indexOf(t)<0&&(this.maps.push(t),t.on("click",n=>{let r;return r=w.tryClick(n,t),void 0!==r?r:(r=x.tryClick(n,t),void 0!==r?r:(r=k.tryClick(n,t),void 0!==r?r:void 0))}))}setupHover(t,n,r){this.maps.push(t),t.on("mousemove",function(t,n,r){let e;return function(){let i=this,o=arguments,u=function(){e=null,r||t.apply(i,o)},a=r&&!e;clearTimeout(e),e=setTimeout(u,n),a&&t.apply(i,o)}}(n=>{let r;return r=w.tryHover(n,t),void 0!==r?r:(r=x.tryHover(n,t),void 0!==r?r:(r=k.tryHover(n,t),void 0!==r?r:void 0))},n,r))}}const C=new B;n.default=C;"undefined"!=typeof window&&window.L&&(window.L.glify=C,window.L.Glify=B)}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,